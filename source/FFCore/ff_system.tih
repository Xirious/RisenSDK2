typedef bSCriticalSection SFFCriticalSection;

// mssdk.OVERLAPPED
struct SFFOverlapped
{
    unsigned __int32 Internal;            // ULONG_PTR
    unsigned __int32 InternalHigh;        // ULONG_PTR
    union u
    {
        struct s {
            unsigned __int32 Offset;      // DWORD
            unsigned __int32 OffsetHigh;  // DWORD
        }      s;
        void * Pointer;                   // PVOID
    }                u;
    void *           hEvent;              // HANDLE
};

typedef FFU32 (__stdcall * FFFThreadStartRoutine)( FFLPVoid a_pParameter );
typedef void (__stdcall * FFFOverlappedCompletionRoutine)( FFU32 a_u32ErrorCode, FFU32 a_u32NumberOfBytesTransfered, SFFOverlapped * a_pOverlapped );

// ?g_FFCalcTimeDiffMilliseconds@@YG_KABUSFFFileTime@@0@Z unsigned __int64 __stdcall g_FFCalcTimeDiffMilliseconds(SFFFileTime const &,SFFFileTime const &)
FFU64 __stdcall _g_FFCalcTimeDiffMilliseconds__YG_KABUSFFFileTime__0_Z( SFFFileTime const & a_FileTime1, SFFFileTime const & a_FileTime2 );
// ?g_FFCloseFile@@YG_NPAX@Z bool __stdcall g_FFCloseFile(void *)
FFBool __stdcall _g_FFCloseFile__YG_NPAX_Z( FFLPVoid a_hFile );
// ?g_FFCloseFileMapping@@YG_NPAX@Z bool __stdcall g_FFCloseFileMapping(void *)
FFBool __stdcall _g_FFCloseFileMapping__YG_NPAX_Z( FFLPVoid a_hFileMappingObject );
// ?g_FFCloseIoCompletionPort@@YG_NPAX@Z bool __stdcall g_FFCloseIoCompletionPort(void *)
FFBool __stdcall _g_FFCloseIoCompletionPort__YG_NPAX_Z( FFLPVoid a_hCompletionPort );
// ?g_FFCloseThread@@YG_NPAX@Z bool __stdcall g_FFCloseThread(void *)
FFBool __stdcall _g_FFCloseThread__YG_NPAX_Z( FFLPVoid a_hThread );
// ?g_FFCompareFileTime@@YGHABUSFFFileTime@@0@Z int __stdcall g_FFCompareFileTime(SFFFileTime const &,SFFFileTime const &)
FFInt __stdcall _g_FFCompareFileTime__YGHABUSFFFileTime__0_Z( SFFFileTime const & a_FileTime1, SFFFileTime const & a_FileTime2 );
// ?g_FFCompareNamesMatchCase@@YGHABVbCString@@0@Z int __stdcall g_FFCompareNamesMatchCase(bCString const &,bCString const &)
FFInt __stdcall _g_FFCompareNamesMatchCase__YGHABVbCString__0_Z( bCString const & a_strName1, bCString const & a_strName2 );
// ?g_FFCompareNamesNoCase@@YGHABVbCString@@0@Z int __stdcall g_FFCompareNamesNoCase(bCString const &,bCString const &)
FFInt __stdcall _g_FFCompareNamesNoCase__YGHABVbCString__0_Z( bCString const & a_strName1, bCString const & a_strName2 );
// ?g_FFCopyFile@@YG_NPBD0_N@Z bool __stdcall g_FFCopyFile(char const *,char const *,bool)
FFBool __stdcall _g_FFCopyFile__YG_NPBD0_N_Z( FFLPCChar a_pcExistingFileName, FFLPCChar a_pcNewFileName, FFBool a_bFailIfExists );
// ?g_FFCreatEvent@@YGPAXPBD_N1@Z void * __stdcall g_FFCreatEvent(char const *,bool,bool)
FFLPVoid __stdcall _g_FFCreatEvent__YGPAXPBD_N1_Z( FFLPCChar a_pcName, FFBool a_bManualReset, FFBool a_bInitialState );
// ?g_FFCreateDirectory@@YG_NPBD@Z bool __stdcall g_FFCreateDirectory(char const *)
FFBool __stdcall _g_FFCreateDirectory__YG_NPBD_Z( FFLPCChar a_pcPathName );
// ?g_FFCreateDirectoryChain@@YG_NPBD@Z bool __stdcall g_FFCreateDirectoryChain(char const *)
FFBool __stdcall _g_FFCreateDirectoryChain__YG_NPBD_Z( FFLPCChar a_pcPathName );
// ?g_FFCreateFile@@YGPAXPBDW4EFFFileCreate@@W4EFFFileAccess@@KKPAX@Z void * __stdcall g_FFCreateFile(char const *,EFFFileCreate,EFFFileAccess,unsigned long,unsigned long,void *)
FFLPVoid __stdcall _g_FFCreateFile__YGPAXPBDW4EFFFileCreate__W4EFFFileAccess__KKPAX_Z( FFLPCChar a_pcFileName, EFFFileCreate a_enuCreationDisposition, EFFFileAccess a_enuDesiredAccess, FFU32 a_u32ShareMode, FFU32 a_u32FlagsAndAttributes, FFLPVoid a_hTemplateFile );
// ?g_FFCreateFileMapping@@YGPAXPAXW4EFFFileMapProtection@@_KPBD@Z void * __stdcall g_FFCreateFileMapping(void *,EFFFileMapProtection,unsigned __int64,char const *)
FFLPVoid __stdcall _g_FFCreateFileMapping__YGPAXPAXW4EFFFileMapProtection___KPBD_Z( FFLPVoid a_hFile, EFFFileMapProtection a_enuProtect, FFU64 a_u64MaximumSize, FFLPCChar a_pcName );
// ?g_FFCreateIoCompletionPort@@YGPAXPAX00K@Z void * __stdcall g_FFCreateIoCompletionPort(void *,void *,void *,unsigned long)
FFLPVoid __stdcall _g_FFCreateIoCompletionPort__YGPAXPAX00K_Z( FFLPVoid a_hFileHandle, FFLPVoid a_hExistingCompletionPort, FFLPVoid a_pCompletionKey, FFU32 a_u32NumberOfConcurrentThreads );
// ?g_FFCreateThread@@YGPAXKP6GKPAX@Z0_NPAK@Z void * __stdcall g_FFCreateThread(unsigned long,unsigned long (__stdcall*)(void *),void *,bool,unsigned long *)
FFLPVoid __stdcall _g_FFCreateThread__YGPAXKP6GKPAX_Z0_NPAK_Z( FFU32 u_32StackSize, FFFThreadStartRoutine a_funcStartAddress, FFLPVoid a_pParameter, FFBool a_bCreateSuspended, FFU32 * a_pu32ThreadId );
// ?g_FFDeleteCriticalSection@@YGXPAU_RTL_CRITICAL_SECTION@@@Z void __stdcall g_FFDeleteCriticalSection(_RTL_CRITICAL_SECTION *)
void __stdcall _g_FFDeleteCriticalSection__YGXPAU_RTL_CRITICAL_SECTION___Z( SFFCriticalSection * a_pCriticalSection );
// ?g_FFDeleteFile@@YG_NPBD@Z bool __stdcall g_FFDeleteFile(char const *)
FFBool __stdcall _g_FFDeleteFile__YG_NPBD_Z( FFLPCChar a_pcFileName );
// ?g_FFDestroyEvent@@YG_NPAX@Z bool __stdcall g_FFDestroyEvent(void *)
FFBool __stdcall _g_FFDestroyEvent__YG_NPAX_Z( FFLPVoid a_hEvent );
// ?g_FFEnterCriticalSection@@YG_NPAU_RTL_CRITICAL_SECTION@@@Z bool __stdcall g_FFEnterCriticalSection(_RTL_CRITICAL_SECTION *)
FFBool __stdcall _g_FFEnterCriticalSection__YG_NPAU_RTL_CRITICAL_SECTION___Z( SFFCriticalSection * a_pCriticalSection );
// ?g_FFFindClose@@YG_NPAX@Z bool __stdcall g_FFFindClose(void *)
FFBool __stdcall _g_FFFindClose__YG_NPAX_Z( FFLPVoid a_hFindFile );
// ?g_FFFindFirstFile@@YGPAXPBDAAUSFFFileFind@@@Z void * __stdcall g_FFFindFirstFile(char const *,SFFFileFind &)
FFLPVoid __stdcall _g_FFFindFirstFile__YGPAXPBDAAUSFFFileFind___Z( FFLPCChar a_pcFileName, SFFFileFind & a_FindFileData );
// ?g_FFFindNextFile@@YG_NPAXAAUSFFFileFind@@@Z bool __stdcall g_FFFindNextFile(void *,SFFFileFind &)
FFBool __stdcall _g_FFFindNextFile__YG_NPAXAAUSFFFileFind___Z( FFLPVoid a_hFindFile, SFFFileFind & a_FindFileData );
// ?g_FFFullPath@@YGPADPADPBDK@Z char * __stdcall g_FFFullPath(char *,char const *,unsigned long)
FFLPChar __stdcall _g_FFFullPath__YGPADPADPBDK_Z( FFLPChar a_pcBuffer, FFLPCChar a_pcFileName, FFU32 a_u32BufferLength );
// ?g_FFGetCurrentDirectory@@YGKPADK@Z unsigned long __stdcall g_FFGetCurrentDirectory(char *,unsigned long)
FFU32 __stdcall _g_FFGetCurrentDirectory__YGKPADK_Z( FFLPChar a_pcBuffer, FFU32 a_u32BufferLength );
// ?g_FFGetCurrentFileTime@@YGXAAUSFFFileTime@@@Z void __stdcall g_FFGetCurrentFileTime(SFFFileTime &)
void __stdcall _g_FFGetCurrentFileTime__YGXAAUSFFFileTime___Z( SFFFileTime & a_FileTime );
// ?g_FFGetFileAttributes@@YGKPBD@Z unsigned long __stdcall g_FFGetFileAttributes(char const *)
FFU32 __stdcall _g_FFGetFileAttributes__YGKPBD_Z( FFLPCChar a_pcFileName );
// ?g_FFGetFileInformation@@YG_NPAXAAUSFFFileData@@@Z bool __stdcall g_FFGetFileInformation(void *,SFFFileData &)
FFBool __stdcall _g_FFGetFileInformation__YG_NPAXAAUSFFFileData___Z( FFLPVoid a_hFile, SFFFileData & a_FileInformation );
// ?g_FFGetFilePointer@@YG_NPAXAA_J@Z bool __stdcall g_FFGetFilePointer(void *,__int64 &)
FFBool __stdcall _g_FFGetFilePointer__YG_NPAXAA_J_Z( FFLPVoid a_hFile, FFI64 & a_i64FilePointer );
// ?g_FFGetFileSize@@YG_NPAXAA_J@Z bool __stdcall g_FFGetFileSize(void *,__int64 &)
FFBool __stdcall _g_FFGetFileSize__YG_NPAXAA_J_Z( FFLPVoid a_hFile, FFI64 & a_i64FileSize );
// ?g_FFGetFileTime@@YG_NPAXPAUSFFFileTime@@11@Z bool __stdcall g_FFGetFileTime(void *,SFFFileTime *,SFFFileTime *,SFFFileTime *)
FFBool __stdcall _g_FFGetFileTime__YG_NPAXPAUSFFFileTime__11_Z( FFLPVoid a_hFile, SFFFileTime * a_pCreationTime, SFFFileTime * a_pLastAccessTime, SFFFileTime * a_pLastWriteTime );
// ?g_FFGetQueuedCompletionStatus@@YG_NPAXPAKPAPAXPAPAU_OVERLAPPED@@K@Z bool __stdcall g_FFGetQueuedCompletionStatus(void *,unsigned long *,void * *,_OVERLAPPED * *,unsigned long)
FFBool __stdcall _g_FFGetQueuedCompletionStatus__YG_NPAXPAKPAPAXPAPAU_OVERLAPPED__K_Z( FFLPVoid a_hCompletionPort, FFU32 * a_pu32NumberOfBytesTransferred, FFLPVoid * a_ppCompletionKey, SFFOverlapped * * a_ppOverlapped, FFU32 a_u32Milliseconds );
// ?g_FFGetSpecialDirectory@@YG_NW4EFFSpecialFolder@@PADK@Z bool __stdcall g_FFGetSpecialDirectory(EFFSpecialFolder,char *,unsigned long)
FFBool __stdcall _g_FFGetSpecialDirectory__YG_NW4EFFSpecialFolder__PADK_Z( EFFSpecialFolder a_enuKnownFolder, FFLPChar a_pcBuffer, FFU32 a_u32BufferLength );
// ?g_FFGetSystemAllocationGranularity@@YG_NAAK@Z bool __stdcall g_FFGetSystemAllocationGranularity(unsigned long &)
FFBool __stdcall _g_FFGetSystemAllocationGranularity__YG_NAAK_Z( FFU32 & a_u32AllocationGranularity );
// ?g_FFGetSystemPageSize@@YG_NAAK@Z bool __stdcall g_FFGetSystemPageSize(unsigned long &)
FFBool __stdcall _g_FFGetSystemPageSize__YG_NAAK_Z( FFU32 & a_u32PageSize );
// ?g_FFGetThreadExitCode@@YG_NPAXPAK@Z bool __stdcall g_FFGetThreadExitCode(void *,unsigned long *)
FFBool __stdcall _g_FFGetThreadExitCode__YG_NPAXPAK_Z( FFLPVoid a_hThread, FFU32 * a_u32ExitCode );
// ?g_FFGetThreadPriority@@YGHPAX@Z int __stdcall g_FFGetThreadPriority(void *)
FFInt __stdcall _g_FFGetThreadPriority__YGHPAX_Z( FFLPVoid a_hThread );
// ?g_FFInitializeCriticalSection@@YG_NPAU_RTL_CRITICAL_SECTION@@@Z bool __stdcall g_FFInitializeCriticalSection(_RTL_CRITICAL_SECTION *)
FFBool __stdcall _g_FFInitializeCriticalSection__YG_NPAU_RTL_CRITICAL_SECTION___Z( SFFCriticalSection * a_pCriticalSection );
// ?g_FFInvalidateFileHandle@@YGXAAPAX@Z void __stdcall g_FFInvalidateFileHandle(void * &)
void __stdcall _g_FFInvalidateFileHandle__YGXAAPAX_Z( FFLPVoid & a_hFile );
// ?g_FFInvalidateFindHandle@@YGXAAPAX@Z void __stdcall g_FFInvalidateFindHandle(void * &)
void __stdcall _g_FFInvalidateFindHandle__YGXAAPAX_Z( FFLPVoid & a_hFindFile );
// ?g_FFIsDirectory@@YG_NPBD@Z bool __stdcall g_FFIsDirectory(char const *)
FFBool __stdcall _g_FFIsDirectory__YG_NPBD_Z( FFLPCChar a_pcFileName );
// ?g_FFIsEqualFileTime@@YG_NABUSFFFileTime@@0@Z bool __stdcall g_FFIsEqualFileTime(SFFFileTime const &,SFFFileTime const &)
FFBool __stdcall _g_FFIsEqualFileTime__YG_NABUSFFFileTime__0_Z( SFFFileTime const & a_FileTime1, SFFFileTime const & a_FileTime2 );
// ?g_FFIsEqualName@@YG_NABVbCString@@0@Z bool __stdcall g_FFIsEqualName(bCString const &,bCString const &)
FFBool __stdcall _g_FFIsEqualName__YG_NABVbCString__0_Z( bCString const & a_strName1, bCString const & a_strName2 );
// ?g_FFIsFile@@YG_NPBD@Z bool __stdcall g_FFIsFile(char const *)
FFBool __stdcall _g_FFIsFile__YG_NPBD_Z( FFLPCChar a_pcFileName );
// ?g_FFIsValidFileHandle@@YG_NPAX@Z bool __stdcall g_FFIsValidFileHandle(void *)
FFBool __stdcall _g_FFIsValidFileHandle__YG_NPAX_Z( FFLPVoid a_hFile );
// ?g_FFIsValidFindHandle@@YG_NPAX@Z bool __stdcall g_FFIsValidFindHandle(void *)
FFBool __stdcall _g_FFIsValidFindHandle__YG_NPAX_Z( FFLPVoid a_hFindFile );
// ?g_FFLeaveCriticalSection@@YGXPAU_RTL_CRITICAL_SECTION@@@Z void __stdcall g_FFLeaveCriticalSection(_RTL_CRITICAL_SECTION *)
void __stdcall _g_FFLeaveCriticalSection__YGXPAU_RTL_CRITICAL_SECTION___Z( SFFCriticalSection * a_pCriticalSection );
// ?g_FFMakePath@@YGXPADPBD111@Z void __stdcall g_FFMakePath(char *,char const *,char const *,char const *,char const *)
void __stdcall _g_FFMakePath__YGXPADPBD111_Z( FFLPChar a_pcPath, FFLPCChar a_pcDrive, FFLPCChar a_pcDir, FFLPCChar a_pcFName, FFLPCChar a_pcExt );
// ?g_FFMapViewOfFile@@YGPAXPAXK_KK@Z void * __stdcall g_FFMapViewOfFile(void *,unsigned long,unsigned __int64,unsigned long)
FFLPVoid __stdcall _g_FFMapViewOfFile__YGPAXPAXK_KK_Z( FFLPVoid a_hFileMappingObject, FFU32 a_u32DesiredAccess, FFU64 a_u64FileOffset, FFU32 a_u32NumberOfBytesToMap );
// ?g_FFMoveFile@@YG_NPBD0_N@Z bool __stdcall g_FFMoveFile(char const *,char const *,bool)
FFBool __stdcall _g_FFMoveFile__YG_NPBD0_N_Z( FFLPCChar a_pcExistingFileName, FFLPCChar a_pcNewFileName, FFBool a_bDontReplaceExisting );
// ?g_FFMsgBoxLastError@@YGXXZ void __stdcall g_FFMsgBoxLastError(void)
void __stdcall _g_FFMsgBoxLastError__YGXXZ( void );
// ?g_FFOpenDirectory@@YGPAXPBD_N@Z void * __stdcall g_FFOpenDirectory(char const *,bool)
FFLPVoid __stdcall _g_FFOpenDirectory__YGPAXPBD_N_Z( FFLPCChar a_pcFileName, FFBool a_bOverlapped );
// ?g_FFPathAddUnixDirSeparator@@YGXAAVbCString@@@Z void __stdcall g_FFPathAddUnixDirSeparator(bCString &)
void __stdcall _g_FFPathAddUnixDirSeparator__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathAddWindowsDirSeparator@@YGXAAVbCString@@@Z void __stdcall g_FFPathAddWindowsDirSeparator(bCString &)
void __stdcall _g_FFPathAddWindowsDirSeparator__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathCanonicalize@@YG_NPADPBD@Z bool __stdcall g_FFPathCanonicalize(char *,char const *)
FFBool __stdcall _g_FFPathCanonicalize__YG_NPADPBD_Z( FFLPChar a_pcBuf, FFLPCChar a_pcPath );
// ?g_FFPathIsAbsPhysical@@YG_NABVbCString@@@Z bool __stdcall g_FFPathIsAbsPhysical(bCString const &)
FFBool __stdcall _g_FFPathIsAbsPhysical__YG_NABVbCString___Z( bCString const & a_strPath );
// ?g_FFPathIsAbsVirtual@@YG_NABVbCString@@@Z bool __stdcall g_FFPathIsAbsVirtual(bCString const &)
FFBool __stdcall _g_FFPathIsAbsVirtual__YG_NABVbCString___Z( bCString const & a_strPath );
// ?g_FFPathIsDots@@YG_NABVbCString@@@Z bool __stdcall g_FFPathIsDots(bCString const &)
FFBool __stdcall _g_FFPathIsDots__YG_NABVbCString___Z( bCString const & a_strPath );
// ?g_FFPathIsRelative@@YG_NABVbCString@@@Z bool __stdcall g_FFPathIsRelative(bCString const &)
FFBool __stdcall _g_FFPathIsRelative__YG_NABVbCString___Z( bCString const & a_strPath );
// ?g_FFPathMakeUnix@@YGXAAVbCString@@@Z void __stdcall g_FFPathMakeUnix(bCString &)
void __stdcall _g_FFPathMakeUnix__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathMakeUnixDir@@YGXAAVbCString@@@Z void __stdcall g_FFPathMakeUnixDir(bCString &)
void __stdcall _g_FFPathMakeUnixDir__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathMakeUnixFile@@YGXAAVbCString@@@Z void __stdcall g_FFPathMakeUnixFile(bCString &)
void __stdcall _g_FFPathMakeUnixFile__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathMakeVolumeRoot@@YGXAAVbCString@@@Z void __stdcall g_FFPathMakeVolumeRoot(bCString &)
void __stdcall _g_FFPathMakeVolumeRoot__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathMakeWindows@@YGXAAVbCString@@@Z void __stdcall g_FFPathMakeWindows(bCString &)
void __stdcall _g_FFPathMakeWindows__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathMakeWindowsDir@@YGXAAVbCString@@@Z void __stdcall g_FFPathMakeWindowsDir(bCString &)
void __stdcall _g_FFPathMakeWindowsDir__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathMakeWindowsFile@@YGXAAVbCString@@@Z void __stdcall g_FFPathMakeWindowsFile(bCString &)
void __stdcall _g_FFPathMakeWindowsFile__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathMatchSpec@@YG_NPBD0@Z bool __stdcall g_FFPathMatchSpec(char const *,char const *)
FFBool __stdcall _g_FFPathMatchSpec__YG_NPBD0_Z( FFLPCChar a_pcFile, FFLPCChar a_pcSpec );
// ?g_FFPathRemoveUnixDirSeparator@@YGXAAVbCString@@@Z void __stdcall g_FFPathRemoveUnixDirSeparator(bCString &)
void __stdcall _g_FFPathRemoveUnixDirSeparator__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPathRemoveWindowsDirSeparator@@YGXAAVbCString@@@Z void __stdcall g_FFPathRemoveWindowsDirSeparator(bCString &)
void __stdcall _g_FFPathRemoveWindowsDirSeparator__YGXAAVbCString___Z( bCString & a_strPath );
// ?g_FFPostQueuedCompletionStatus@@YG_NPAXK0PAU_OVERLAPPED@@@Z bool __stdcall g_FFPostQueuedCompletionStatus(void *,unsigned long,void *,_OVERLAPPED *)
FFBool __stdcall _g_FFPostQueuedCompletionStatus__YG_NPAXK0PAU_OVERLAPPED___Z( FFLPVoid a_hCompletionPort, FFU32 a_u32NumberOfBytesTransferred, FFLPVoid a_pCompletionKey, SFFOverlapped * a_pOverlapped );
// ?g_FFReadDirectoryChanges@@YG_NPAX0K_NKPAKPAU_OVERLAPPED@@P6GXKK3@Z@Z bool __stdcall g_FFReadDirectoryChanges(void *,void *,unsigned long,bool,unsigned long,unsigned long *,_OVERLAPPED *,void (__stdcall*)(unsigned long,unsigned long,_OVERLAPPED *))
FFBool __stdcall _g_FFReadDirectoryChanges__YG_NPAX0K_NKPAKPAU_OVERLAPPED__P6GXKK3_Z_Z( FFLPVoid a_hDirectory, FFLPVoid a_pBuffer, FFU32 a_u32BufferLength, FFBool a_bWatchSubtree, FFU32 a_u32NotifyFilter, FFU32 * a_u32BytesReturned, SFFOverlapped * a_pOverlapped, FFFOverlappedCompletionRoutine a_funcCompletionRoutine );
// ?g_FFReadFile@@YG_NPAX0KPAK@Z bool __stdcall g_FFReadFile(void *,void *,unsigned long,unsigned long *)
FFBool __stdcall _g_FFReadFile__YG_NPAX0KPAK_Z( FFLPVoid a_hFile, FFLPVoid a_pBuffer, FFU32 a_u32NumberOfBytesToRead, FFU32 * a_pu32NumberOfBytesRead );
// ?g_FFRemoveDirectory@@YG_NPBD@Z bool __stdcall g_FFRemoveDirectory(char const *)
FFBool __stdcall _g_FFRemoveDirectory__YG_NPBD_Z( FFLPCChar a_pcPathName );
// ?g_FFResumeThread@@YGKPAX@Z unsigned long __stdcall g_FFResumeThread(void *)
FFU32 __stdcall _g_FFResumeThread__YGKPAX_Z( FFLPVoid a_hThread );
// ?g_FFSetCurrentDirectory@@YG_NPBD@Z bool __stdcall g_FFSetCurrentDirectory(char const *)
FFBool __stdcall _g_FFSetCurrentDirectory__YG_NPBD_Z( FFLPCChar a_pcPathName );
// ?g_FFSetEndOfFile@@YG_NPAX@Z bool __stdcall g_FFSetEndOfFile(void *)
FFBool __stdcall _g_FFSetEndOfFile__YG_NPAX_Z( FFLPVoid a_hFile );
// ?g_FFSetEvent@@YG_NPAX_N@Z bool __stdcall g_FFSetEvent(void *,bool)
FFBool __stdcall _g_FFSetEvent__YG_NPAX_N_Z( FFLPVoid a_hEvent, FFBool a_bSignaled );
// ?g_FFSetFileAttributes@@YG_NPBDK@Z bool __stdcall g_FFSetFileAttributes(char const *,unsigned long)
FFBool __stdcall _g_FFSetFileAttributes__YG_NPBDK_Z( FFLPCChar a_pcFileName, FFU32 a_u32FileAttributes );
// ?g_FFSetFilePointer@@YG_NPAX_JPA_JW4EFFFileSeek@@@Z bool __stdcall g_FFSetFilePointer(void *,__int64,__int64 *,EFFFileSeek)
FFBool __stdcall _g_FFSetFilePointer__YG_NPAX_JPA_JW4EFFFileSeek___Z( FFLPVoid hFile, FFI64 a_i64DistanceToMove, FFI64 * a_i64NewFilePointer, EFFFileSeek a_enuMoveMethod );
// ?g_FFSetFileTime@@YG_NPAXPBUSFFFileTime@@11@Z bool __stdcall g_FFSetFileTime(void *,SFFFileTime const *,SFFFileTime const *,SFFFileTime const *)
FFBool __stdcall _g_FFSetFileTime__YG_NPAXPBUSFFFileTime__11_Z( FFLPVoid a_hFile, SFFFileTime const * a_pCreationTime, SFFFileTime const * a_pLastAccessTime, SFFFileTime const * a_pLastWriteTime );
// ?g_FFSetThreadPriority@@YG_NPAXH@Z bool __stdcall g_FFSetThreadPriority(void *,int)
FFBool __stdcall _g_FFSetThreadPriority__YG_NPAXH_Z( FFLPVoid a_hThread, FFInt a_iPriority );
// ?g_FFSplitPath@@YGXPBDPAD111@Z void __stdcall g_FFSplitPath(char const *,char *,char *,char *,char *)
void __stdcall _g_FFSplitPath__YGXPBDPAD111_Z( FFLPCChar a_pcPath, FFLPChar a_pcDrive, FFLPChar a_pcDir, FFLPChar a_pcFName, FFLPChar a_pcExt );
// ?g_FFSuspendThread@@YGKPAX@Z unsigned long __stdcall g_FFSuspendThread(void *)
FFU32 __stdcall _g_FFSuspendThread__YGKPAX_Z( FFLPVoid a_hThread );
// ?g_FFTrace@@YGXPBD@Z void __stdcall g_FFTrace(char const *)
void __stdcall _g_FFTrace__YGXPBD_Z( FFLPCChar a_pcOutputString );
// ?g_FFTraceF@@YAXPBDZZ void __cdecl g_FFTraceF(char const *,...)
void __cdecl _g_FFTraceF__YAXPBDZZ( FFLPCChar a_pcFormat, ... );
// ?g_FFUnmapViewOfFile@@YG_NPBX@Z bool __stdcall g_FFUnmapViewOfFile(void const *)
FFBool __stdcall _g_FFUnmapViewOfFile__YG_NPBX_Z( FFLPCVoid a_pBaseAddress );
// ?g_FFWaitForSingleObject@@YGKPAXK@Z unsigned long __stdcall g_FFWaitForSingleObject(void *,unsigned long)
FFU32 __stdcall _g_FFWaitForSingleObject__YGKPAXK_Z( FFLPVoid a_hHandle, FFU32 a_u32Milliseconds );
// ?g_FFWriteFile@@YG_NPAXPBXKPAK@Z bool __stdcall g_FFWriteFile(void *,void const *,unsigned long,unsigned long *)
FFBool __stdcall _g_FFWriteFile__YG_NPAXPBXKPAK_Z( FFLPVoid a_hFile, FFLPCVoid a_pBuffer, FFU32 a_u32NumberOfBytesToWrite, FFU32 * a_pu32NumberOfBytesWritten );
// ?g_FFZeroMemory@@YGPAXPAXK@Z void * __stdcall g_FFZeroMemory(void *,unsigned long)
FFLPVoid __stdcall _g_FFZeroMemory__YGPAXPAXK_Z( FFLPVoid a_pDestination, FFU32 a_u32Length );
