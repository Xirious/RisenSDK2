struct bCBox;
struct bCRay;

struct bCPlane
{
    bCVector m_vecNormal;
    GEFloat  m_fDistance;
};
// ??0bCPlane@@QAE@ABV0@@Z public: __thiscall bCPlane::bCPlane(bCPlane const &)
bCPlane * __thiscall __0bCPlane__QAE_ABV0__Z( bCPlane *, bCPlane const * );
// ??0bCPlane@@QAE@ABVbCVector@@00@Z public: __thiscall bCPlane::bCPlane(bCVector const &,bCVector const &,bCVector const &)
bCPlane * __thiscall __0bCPlane__QAE_ABVbCVector__00_Z( bCPlane *, bCVector const *, bCVector const *, bCVector const * );
// ??0bCPlane@@QAE@ABVbCVector@@0@Z public: __thiscall bCPlane::bCPlane(bCVector const &,bCVector const &)
bCPlane * __thiscall __0bCPlane__QAE_ABVbCVector__0_Z( bCPlane *, bCVector const *, bCVector const * );
// ??0bCPlane@@QAE@MMMM@Z public: __thiscall bCPlane::bCPlane(float,float,float,float)
bCPlane * __thiscall __0bCPlane__QAE_MMMM_Z( bCPlane *, GEFloat, GEFloat, GEFloat, GEFloat );
// ??0bCPlane@@QAE@XZ public: __thiscall bCPlane::bCPlane(void)
bCPlane * __thiscall __0bCPlane__QAE_XZ( bCPlane * );
// ??1bCPlane@@QAE@XZ public: __thiscall bCPlane::~bCPlane(void)
void __thiscall __1bCPlane__QAE_XZ( bCPlane * );
// ??4bCPlane@@QAEAAV0@ABV0@@Z public: bCPlane & __thiscall bCPlane::operator=(bCPlane const &)
bCPlane * __thiscall __4bCPlane__QAEAAV0_ABV0__Z( bCPlane *, bCPlane const * );
// ??5bCPlane@@QBEAAVbCOStream@@AAV1@@Z public: bCOStream & __thiscall bCPlane::operator>>(bCOStream &)const
bCOStream * __thiscall __5bCPlane__QBEAAVbCOStream__AAV1__Z( bCPlane const *, bCOStream * );
// ??6bCPlane@@QAEAAVbCIStream@@AAV1@@Z public: bCIStream & __thiscall bCPlane::operator<<(bCIStream &)
bCIStream * __thiscall __6bCPlane__QAEAAVbCIStream__AAV1__Z( bCPlane *, bCIStream * );
// ??DbCPlane@@QBE?BV0@ABVbCMatrix3@@@Z public: bCPlane const __thiscall bCPlane::operator*(bCMatrix3 const &)const
bCPlane const * __thiscall __DbCPlane__QBE_BV0_ABVbCMatrix3___Z( bCPlane const *, bCPlane *, bCMatrix3 const * );
// ??DbCPlane@@QBE?BV0@ABVbCMatrix@@@Z public: bCPlane const __thiscall bCPlane::operator*(bCMatrix const &)const
bCPlane const * __thiscall __DbCPlane__QBE_BV0_ABVbCMatrix___Z( bCPlane const *, bCPlane *, bCMatrix const * );
// ??DbCPlane@@QBE?BV0@M@Z public: bCPlane const __thiscall bCPlane::operator*(float)const
bCPlane const * __thiscall __DbCPlane__QBE_BV0_M_Z( bCPlane const *, bCPlane *, GEFloat );
// ??GbCPlane@@QBE?BV0@ABVbCVector@@@Z public: bCPlane const __thiscall bCPlane::operator-(bCVector const &)const
bCPlane const * __thiscall __GbCPlane__QBE_BV0_ABVbCVector___Z( bCPlane const *, bCPlane *, bCVector const * );
// ??GbCPlane@@QBE?BV0@XZ public: bCPlane const __thiscall bCPlane::operator-(void)const
bCPlane const * __thiscall __GbCPlane__QBE_BV0_XZ( bCPlane const *, bCPlane * );
// ??HbCPlane@@QBE?BV0@ABVbCVector@@@Z public: bCPlane const __thiscall bCPlane::operator+(bCVector const &)const
bCPlane const * __thiscall __HbCPlane__QBE_BV0_ABVbCVector___Z( bCPlane const *, bCPlane *, bCVector const * );
// ??KbCPlane@@QBE?BV0@ABVbCMatrix3@@@Z public: bCPlane const __thiscall bCPlane::operator/(bCMatrix3 const &)const
bCPlane const * __thiscall __KbCPlane__QBE_BV0_ABVbCMatrix3___Z( bCPlane const *, bCPlane *, bCMatrix3 const * );
// ??KbCPlane@@QBE?BV0@ABVbCMatrix@@@Z public: bCPlane const __thiscall bCPlane::operator/(bCMatrix const &)const
bCPlane const * __thiscall __KbCPlane__QBE_BV0_ABVbCMatrix___Z( bCPlane const *, bCPlane *, bCMatrix const * );
// ??KbCPlane@@QBE?BV0@M@Z public: bCPlane const __thiscall bCPlane::operator/(float)const
bCPlane const * __thiscall __KbCPlane__QBE_BV0_M_Z( bCPlane const *, bCPlane *, GEFloat );
// ??XbCPlane@@QAEAAV0@M@Z public: bCPlane & __thiscall bCPlane::operator*=(float)
bCPlane * __thiscall __XbCPlane__QAEAAV0_M_Z( bCPlane *, GEFloat );
// ??YbCPlane@@QAEAAV0@ABVbCVector@@@Z public: bCPlane & __thiscall bCPlane::operator+=(bCVector const &)
bCPlane * __thiscall __YbCPlane__QAEAAV0_ABVbCVector___Z( bCPlane *, bCVector const * );
// ??ZbCPlane@@QAEAAV0@ABVbCVector@@@Z public: bCPlane & __thiscall bCPlane::operator-=(bCVector const &)
bCPlane * __thiscall __ZbCPlane__QAEAAV0_ABVbCVector___Z( bCPlane *, bCVector const * );
// ??_0bCPlane@@QAEAAV0@M@Z public: bCPlane & __thiscall bCPlane::operator/=(float)
bCPlane * __thiscall ___0bCPlane__QAEAAV0_M_Z( bCPlane *, GEFloat );
// ?AccessDistance@bCPlane@@QAEAAMXZ public: float & __thiscall bCPlane::AccessDistance(void)
GEFloat * __thiscall _AccessDistance_bCPlane__QAEAAMXZ( bCPlane * );
// ?AccessNormal@bCPlane@@QAEAAVbCVector@@XZ public: bCVector & __thiscall bCPlane::AccessNormal(void)
bCVector * __thiscall _AccessNormal_bCPlane__QAEAAVbCVector__XZ( bCPlane * );
// ?ClassifyPoint@bCPlane@@QBEMABVbCVector@@@Z public: float __thiscall bCPlane::ClassifyPoint(bCVector const &)const
GEFloat __thiscall _ClassifyPoint_bCPlane__QBEMABVbCVector___Z( bCPlane const *, bCVector const * );
// ?ClassifyVector@bCPlane@@QBEMABVbCVector@@@Z public: float __thiscall bCPlane::ClassifyVector(bCVector const &)const
GEFloat __thiscall _ClassifyVector_bCPlane__QBEMABVbCVector___Z( bCPlane const *, bCVector const * );
// ?Clear@bCPlane@@QAEXXZ public: void __thiscall bCPlane::Clear(void)
void __thiscall _Clear_bCPlane__QAEXXZ( bCPlane * );
// ?GetDistance@bCPlane@@QBEMXZ public: float __thiscall bCPlane::GetDistance(void)const
GEFloat __thiscall _GetDistance_bCPlane__QBEMXZ( bCPlane const * );
// ?GetDistance@bCPlane@@QBEXAAM@Z public: void __thiscall bCPlane::GetDistance(float &)const
void __thiscall _GetDistance_bCPlane__QBEXAAM_Z( bCPlane const *, GEFloat * );
// ?GetIntersectionDistance@bCPlane@@QBEMABVbCRay@@@Z public: float __thiscall bCPlane::GetIntersectionDistance(bCRay const &)const
GEFloat __thiscall _GetIntersectionDistance_bCPlane__QBEMABVbCRay___Z( bCPlane const *, bCRay const * );
// ?GetInvRotated@bCPlane@@QBE?AV1@ABVbCQuaternion@@@Z public: bCPlane __thiscall bCPlane::GetInvRotated(bCQuaternion const &)const
bCPlane * __thiscall _GetInvRotated_bCPlane__QBE_AV1_ABVbCQuaternion___Z( bCPlane const *, bCPlane *, bCQuaternion const * );
// ?GetInvRotated@bCPlane@@QBEXAAV1@ABVbCQuaternion@@@Z public: void __thiscall bCPlane::GetInvRotated(bCPlane &,bCQuaternion const &)const
void __thiscall _GetInvRotated_bCPlane__QBEXAAV1_ABVbCQuaternion___Z( bCPlane const *, bCPlane *, bCQuaternion const * );
// ?GetInvScaled@bCPlane@@QBE?AV1@M@Z public: bCPlane __thiscall bCPlane::GetInvScaled(float)const
bCPlane * __thiscall _GetInvScaled_bCPlane__QBE_AV1_M_Z( bCPlane const *, bCPlane *, GEFloat );
// ?GetInvScaled@bCPlane@@QBEXAAV1@M@Z public: void __thiscall bCPlane::GetInvScaled(bCPlane &,float)const
void __thiscall _GetInvScaled_bCPlane__QBEXAAV1_M_Z( bCPlane const *, bCPlane *, GEFloat );
// ?GetInvTransformed@bCPlane@@QBE?AV1@ABVbCMatrix3@@@Z public: bCPlane __thiscall bCPlane::GetInvTransformed(bCMatrix3 const &)const
bCPlane * __thiscall _GetInvTransformed_bCPlane__QBE_AV1_ABVbCMatrix3___Z( bCPlane const *, bCPlane *, bCMatrix3 const * );
// ?GetInvTransformed@bCPlane@@QBE?AV1@ABVbCMatrix@@@Z public: bCPlane __thiscall bCPlane::GetInvTransformed(bCMatrix const &)const
bCPlane * __thiscall _GetInvTransformed_bCPlane__QBE_AV1_ABVbCMatrix___Z( bCPlane const *, bCPlane *, bCMatrix const * );
// ?GetInvTransformed@bCPlane@@QBEXAAV1@ABVbCMatrix3@@@Z public: void __thiscall bCPlane::GetInvTransformed(bCPlane &,bCMatrix3 const &)const
void __thiscall _GetInvTransformed_bCPlane__QBEXAAV1_ABVbCMatrix3___Z( bCPlane const *, bCPlane *, bCMatrix3 const * );
// ?GetInvTransformed@bCPlane@@QBEXAAV1@ABVbCMatrix@@@Z public: void __thiscall bCPlane::GetInvTransformed(bCPlane &,bCMatrix const &)const
void __thiscall _GetInvTransformed_bCPlane__QBEXAAV1_ABVbCMatrix___Z( bCPlane const *, bCPlane *, bCMatrix const * );
// ?GetInvTranslated@bCPlane@@QBE?AV1@ABVbCVector@@@Z public: bCPlane __thiscall bCPlane::GetInvTranslated(bCVector const &)const
bCPlane * __thiscall _GetInvTranslated_bCPlane__QBE_AV1_ABVbCVector___Z( bCPlane const *, bCPlane *, bCVector const * );
// ?GetInvTranslated@bCPlane@@QBEXAAV1@ABVbCVector@@@Z public: void __thiscall bCPlane::GetInvTranslated(bCPlane &,bCVector const &)const
void __thiscall _GetInvTranslated_bCPlane__QBEXAAV1_ABVbCVector___Z( bCPlane const *, bCPlane *, bCVector const * );
// ?GetInverted@bCPlane@@QBE?AV1@XZ public: bCPlane __thiscall bCPlane::GetInverted(void)const
bCPlane * __thiscall _GetInverted_bCPlane__QBE_AV1_XZ( bCPlane const *, bCPlane * );
// ?GetInverted@bCPlane@@QBEXAAV1@@Z public: void __thiscall bCPlane::GetInverted(bCPlane &)const
void __thiscall _GetInverted_bCPlane__QBEXAAV1__Z( bCPlane const *, bCPlane * );
// ?GetNegated@bCPlane@@QBE?AV1@XZ public: bCPlane __thiscall bCPlane::GetNegated(void)const
bCPlane * __thiscall _GetNegated_bCPlane__QBE_AV1_XZ( bCPlane const *, bCPlane * );
// ?GetNegated@bCPlane@@QBEXAAV1@@Z public: void __thiscall bCPlane::GetNegated(bCPlane &)const
void __thiscall _GetNegated_bCPlane__QBEXAAV1__Z( bCPlane const *, bCPlane * );
// ?GetNormal@bCPlane@@QBEABVbCVector@@XZ public: bCVector const & __thiscall bCPlane::GetNormal(void)const
bCVector const * __thiscall _GetNormal_bCPlane__QBEABVbCVector__XZ( bCPlane const * );
// ?GetNormal@bCPlane@@QBEXAAVbCVector@@@Z public: void __thiscall bCPlane::GetNormal(bCVector &)const
void __thiscall _GetNormal_bCPlane__QBEXAAVbCVector___Z( bCPlane const *, bCVector * );
// ?GetNormalized@bCPlane@@QBE?AV1@XZ public: bCPlane __thiscall bCPlane::GetNormalized(void)const
bCPlane * __thiscall _GetNormalized_bCPlane__QBE_AV1_XZ( bCPlane const *, bCPlane * );
// ?GetRotated@bCPlane@@QBE?AV1@ABVbCQuaternion@@@Z public: bCPlane __thiscall bCPlane::GetRotated(bCQuaternion const &)const
bCPlane * __thiscall _GetRotated_bCPlane__QBE_AV1_ABVbCQuaternion___Z( bCPlane const *, bCPlane *, bCQuaternion const * );
// ?GetRotated@bCPlane@@QBEXAAV1@ABVbCQuaternion@@@Z public: void __thiscall bCPlane::GetRotated(bCPlane &,bCQuaternion const &)const
void __thiscall _GetRotated_bCPlane__QBEXAAV1_ABVbCQuaternion___Z( bCPlane const *, bCPlane *, bCQuaternion const * );
// ?GetScaled@bCPlane@@QBE?AV1@M@Z public: bCPlane __thiscall bCPlane::GetScaled(float)const
bCPlane * __thiscall _GetScaled_bCPlane__QBE_AV1_M_Z( bCPlane const *, bCPlane *, GEFloat );
// ?GetScaled@bCPlane@@QBEXAAV1@M@Z public: void __thiscall bCPlane::GetScaled(bCPlane &,float)const
void __thiscall _GetScaled_bCPlane__QBEXAAV1_M_Z( bCPlane const *, bCPlane *, GEFloat );
// ?GetTransformed@bCPlane@@QBE?AV1@ABVbCMatrix3@@@Z public: bCPlane __thiscall bCPlane::GetTransformed(bCMatrix3 const &)const
bCPlane * __thiscall _GetTransformed_bCPlane__QBE_AV1_ABVbCMatrix3___Z( bCPlane const *, bCPlane *, bCMatrix3 const * );
// ?GetTransformed@bCPlane@@QBE?AV1@ABVbCMatrix@@@Z public: bCPlane __thiscall bCPlane::GetTransformed(bCMatrix const &)const
bCPlane * __thiscall _GetTransformed_bCPlane__QBE_AV1_ABVbCMatrix___Z( bCPlane const *, bCPlane *, bCMatrix const * );
// ?GetTransformed@bCPlane@@QBEXAAV1@ABVbCMatrix3@@@Z public: void __thiscall bCPlane::GetTransformed(bCPlane &,bCMatrix3 const &)const
void __thiscall _GetTransformed_bCPlane__QBEXAAV1_ABVbCMatrix3___Z( bCPlane const *, bCPlane *, bCMatrix3 const * );
// ?GetTransformed@bCPlane@@QBEXAAV1@ABVbCMatrix@@@Z public: void __thiscall bCPlane::GetTransformed(bCPlane &,bCMatrix const &)const
void __thiscall _GetTransformed_bCPlane__QBEXAAV1_ABVbCMatrix___Z( bCPlane const *, bCPlane *, bCMatrix const * );
// ?GetTranslated@bCPlane@@QBE?AV1@ABVbCVector@@@Z public: bCPlane __thiscall bCPlane::GetTranslated(bCVector const &)const
bCPlane * __thiscall _GetTranslated_bCPlane__QBE_AV1_ABVbCVector___Z( bCPlane const *, bCPlane *, bCVector const * );
// ?GetTranslated@bCPlane@@QBEXAAV1@ABVbCVector@@@Z public: void __thiscall bCPlane::GetTranslated(bCPlane &,bCVector const &)const
void __thiscall _GetTranslated_bCPlane__QBEXAAV1_ABVbCVector___Z( bCPlane const *, bCPlane *, bCVector const * );
// ?Intersects@bCPlane@@QBE_NABVbCBox@@@Z public: bool __thiscall bCPlane::Intersects(bCBox const &)const
GEBool __thiscall _Intersects_bCPlane__QBE_NABVbCBox___Z( bCPlane const *, bCBox const * );
// ?InvRotate@bCPlane@@QAEXABVbCQuaternion@@@Z public: void __thiscall bCPlane::InvRotate(bCQuaternion const &)
void __thiscall _InvRotate_bCPlane__QAEXABVbCQuaternion___Z( bCPlane *, bCQuaternion const * );
// ?InvScale@bCPlane@@QAEXM@Z public: void __thiscall bCPlane::InvScale(float)
void __thiscall _InvScale_bCPlane__QAEXM_Z( bCPlane *, GEFloat );
// ?InvTransform@bCPlane@@QAEXABVbCMatrix3@@@Z public: void __thiscall bCPlane::InvTransform(bCMatrix3 const &)
void __thiscall _InvTransform_bCPlane__QAEXABVbCMatrix3___Z( bCPlane *, bCMatrix3 const * );
// ?InvTransform@bCPlane@@QAEXABVbCMatrix@@@Z public: void __thiscall bCPlane::InvTransform(bCMatrix const &)
void __thiscall _InvTransform_bCPlane__QAEXABVbCMatrix___Z( bCPlane *, bCMatrix const * );
// ?InvTranslate@bCPlane@@QAEXABVbCVector@@@Z public: void __thiscall bCPlane::InvTranslate(bCVector const &)
void __thiscall _InvTranslate_bCPlane__QAEXABVbCVector___Z( bCPlane *, bCVector const * );
// ?Invert@bCPlane@@QAEXXZ public: void __thiscall bCPlane::Invert(void)
void __thiscall _Invert_bCPlane__QAEXXZ( bCPlane * );
// ?Negate@bCPlane@@QAEXXZ public: void __thiscall bCPlane::Negate(void)
void __thiscall _Negate_bCPlane__QAEXXZ( bCPlane * );
// ?Normalize@bCPlane@@QAEXXZ public: void __thiscall bCPlane::Normalize(void)
void __thiscall _Normalize_bCPlane__QAEXXZ( bCPlane * );
// ?Rotate@bCPlane@@QAEXABVbCQuaternion@@@Z public: void __thiscall bCPlane::Rotate(bCQuaternion const &)
void __thiscall _Rotate_bCPlane__QAEXABVbCQuaternion___Z( bCPlane *, bCQuaternion const * );
// ?Scale@bCPlane@@QAEXM@Z public: void __thiscall bCPlane::Scale(float)
void __thiscall _Scale_bCPlane__QAEXM_Z( bCPlane *, GEFloat );
// ?SetDistance@bCPlane@@QAEXM@Z public: void __thiscall bCPlane::SetDistance(float)
void __thiscall _SetDistance_bCPlane__QAEXM_Z( bCPlane *, GEFloat );
// ?SetNormal@bCPlane@@QAEXABVbCVector@@@Z public: void __thiscall bCPlane::SetNormal(bCVector const &)
void __thiscall _SetNormal_bCPlane__QAEXABVbCVector___Z( bCPlane *, bCVector const * );
// ?SetPlane@bCPlane@@QAEXABV1@@Z public: void __thiscall bCPlane::SetPlane(bCPlane const &)
void __thiscall _SetPlane_bCPlane__QAEXABV1__Z( bCPlane *, bCPlane const * );
// ?Transform@bCPlane@@QAEXABVbCMatrix3@@@Z public: void __thiscall bCPlane::Transform(bCMatrix3 const &)
void __thiscall _Transform_bCPlane__QAEXABVbCMatrix3___Z( bCPlane *, bCMatrix3 const * );
// ?Transform@bCPlane@@QAEXABVbCMatrix@@@Z public: void __thiscall bCPlane::Transform(bCMatrix const &)
void __thiscall _Transform_bCPlane__QAEXABVbCMatrix___Z( bCPlane *, bCMatrix const * );
// ?Translate@bCPlane@@QAEXABVbCVector@@@Z public: void __thiscall bCPlane::Translate(bCVector const &)
void __thiscall _Translate_bCPlane__QAEXABVbCVector___Z( bCPlane *, bCVector const * );
// ?m_fDummy@bCPlane@@1MA protected: static float bCPlane::m_fDummy
GEFloat DLLIMPORT _m_fDummy_bCPlane__1MA;
