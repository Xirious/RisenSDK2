typedef GEU32 (__stdcall * bFThreadStartRoutine)( GELPVoid );

enum bCThread_bEThreadPriority : __int32
{
    bCThread_bEThreadPriority_Idle         = -15,
    bCThread_bEThreadPriority_Lowest       = -2,
    bCThread_bEThreadPriority_BelowNormal  = -1,
    bCThread_bEThreadPriority_Normal       = 0,
    bCThread_bEThreadPriority_AboveNormal  = 1,
    bCThread_bEThreadPriority_Highest      = 2,
    bCThread_bEThreadPriority_TimeCritical = 15
};

struct bCThread_bSThreadContext
{
    GELPVoid m_pParameter;
    GELPVoid m_pData;
};
// ??0bSThreadContext@bCThread@@QAE@XZ public: __thiscall bCThread::bSThreadContext::bSThreadContext(void)
bCThread_bSThreadContext * __thiscall __0bSThreadContext_bCThread__QAE_XZ( bCThread_bSThreadContext * );
// ??4bSThreadContext@bCThread@@QAEAAU01@ABU01@@Z public: bCThread::bSThreadContext & __thiscall bCThread::bSThreadContext::operator=(bCThread::bSThreadContext const &)
bCThread_bSThreadContext * __thiscall __4bSThreadContext_bCThread__QAEAAU01_ABU01__Z( bCThread_bSThreadContext *, bCThread_bSThreadContext const * );

struct bCThread;
struct bCThread_vftable
{
    void (__thiscall * __vecDelDtor)( bCThread *, unsigned int );
};
struct bCThread_data
{
    GELPVoid                 m_pHandle;
    bCThread_bSThreadContext m_Context;
};
struct bCThread
{
    bCThread_vftable const * __vfptr;
    bCThread_data            data;
};
// ??0bCThread@@QAE@ABV0@@Z public: __thiscall bCThread::bCThread(bCThread const &)
bCThread * __thiscall __0bCThread__QAE_ABV0__Z( bCThread *, bCThread const * );
// ??0bCThread@@QAE@XZ public: __thiscall bCThread::bCThread(void)
bCThread * __thiscall __0bCThread__QAE_XZ( bCThread * );
// ??1bCThread@@UAE@XZ public: virtual __thiscall bCThread::~bCThread(void)
void __thiscall __1bCThread__UAE_XZ( bCThread * );
// ??4bCThread@@QAEAAV0@ABV0@@Z public: bCThread & __thiscall bCThread::operator=(bCThread const &)
bCThread * __thiscall __4bCThread__QAEAAV0_ABV0__Z( bCThread *, bCThread const * );
// ??_7bCThread@@6B@ const bCThread::`vftable'
bCThread_vftable const DLLIMPORT ___7bCThread__6B_;
// ?Create@bCThread@@QAE_NABUbSThreadContext@1@P6GKPAX@Z@Z public: bool __thiscall bCThread::Create(bCThread::bSThreadContext const &,unsigned long (__stdcall*)(void *))
GEBool __thiscall _Create_bCThread__QAE_NABUbSThreadContext_1_P6GKPAX_Z_Z( bCThread *, bCThread_bSThreadContext const *, bFThreadStartRoutine );
// ?Destroy@bCThread@@QAEXXZ public: void __thiscall bCThread::Destroy(void)
void __thiscall _Destroy_bCThread__QAEXXZ( bCThread * );
// ?GetHandle@bCThread@@QBEPAXXZ public: void * __thiscall bCThread::GetHandle(void)const
GELPVoid __thiscall _GetHandle_bCThread__QBEPAXXZ( bCThread const * );
// ?IsValid@bCThread@@QBE_NXZ public: bool __thiscall bCThread::IsValid(void)const
GEBool __thiscall _IsValid_bCThread__QBE_NXZ( bCThread const * );
// ?SetPriority@bCThread@@QAEXW4bEThreadPriority@1@@Z public: void __thiscall bCThread::SetPriority(bCThread::bEThreadPriority)
void __thiscall _SetPriority_bCThread__QAEXW4bEThreadPriority_1__Z( bCThread *, bCThread_bEThreadPriority );
