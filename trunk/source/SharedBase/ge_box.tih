enum bCBox_bECoordinate : GEInt
{
    bCBox_bECoordinate_MinX,
    bCBox_bECoordinate_MinY,
    bCBox_bECoordinate_MinZ,
    bCBox_bECoordinate_MaxX,
    bCBox_bECoordinate_MaxY,
    bCBox_bECoordinate_MaxZ,
    bCBox_bECoordinate_Count
};

enum bCBox_bEIntersection : __int32
{
    bCBox_bEIntersection_FIXME
};

enum bCBox_bEVertex : __int32
{
    bCBox_bEVertex_FIXME_0,
    bCBox_bEVertex_FIXME_1,
    bCBox_bEVertex_FIXME_2,
    bCBox_bEVertex_FIXME_3,
    bCBox_bEVertex_FIXME_4,
    bCBox_bEVertex_FIXME_5,
    bCBox_bEVertex_FIXME_6,
    bCBox_bEVertex_FIXME_7,
    bCBox_bEVertex_Count
};

struct bCBox
{
    bCVector m_vecMin;
    bCVector m_vecMax;
};
bTVolume( bCBox )
// ??0bCBox@@QAE@ABV0@@Z public: __thiscall bCBox::bCBox(bCBox const &)
bCBox * __thiscall __0bCBox__QAE_ABV0__Z( bCBox *, bCBox const * );
// ??0bCBox@@QAE@ABVbCVector@@0@Z public: __thiscall bCBox::bCBox(bCVector const &,bCVector const &)
bCBox * __thiscall __0bCBox__QAE_ABVbCVector__0_Z( bCBox *, bCVector const *, bCVector const * );
// ??0bCBox@@QAE@ABVbCVector@@M@Z public: __thiscall bCBox::bCBox(bCVector const &,float)
bCBox * __thiscall __0bCBox__QAE_ABVbCVector__M_Z( bCBox *, bCVector const *, GEFloat );
// ??0bCBox@@QAE@XZ public: __thiscall bCBox::bCBox(void)
bCBox * __thiscall __0bCBox__QAE_XZ( bCBox * );
// ??1bCBox@@QAE@XZ public: __thiscall bCBox::~bCBox(void)
void __thiscall __1bCBox__QAE_XZ( bCBox * );
// ??4bCBox@@QAEAAV0@ABV0@@Z public: bCBox & __thiscall bCBox::operator=(bCBox const &)
bCBox * __thiscall __4bCBox__QAEAAV0_ABV0__Z( bCBox *, bCBox const * );
// ??5bCBox@@QBEAAVbCOStream@@AAV1@@Z public: bCOStream & __thiscall bCBox::operator>>(bCOStream &)const
bCOStream * __thiscall __5bCBox__QBEAAVbCOStream__AAV1__Z( bCBox const *, bCOStream * );
// ??6bCBox@@QAEAAVbCIStream@@AAV1@@Z public: bCIStream & __thiscall bCBox::operator<<(bCIStream &)
bCIStream * __thiscall __6bCBox__QAEAAVbCIStream__AAV1__Z( bCBox *, bCIStream * );
// ??8bCBox@@QBE_NABV0@@Z public: bool __thiscall bCBox::operator==(bCBox const &)const
GEBool __thiscall __8bCBox__QBE_NABV0__Z( bCBox const *, bCBox const * );
// ??9bCBox@@QBE_NABV0@@Z public: bool __thiscall bCBox::operator!=(bCBox const &)const
GEBool __thiscall __9bCBox__QBE_NABV0__Z( bCBox const *, bCBox const * );
// ??DbCBox@@QBE?AV0@ABVbCMatrix3@@@Z public: bCBox __thiscall bCBox::operator*(bCMatrix3 const &)const
bCBox * __thiscall __DbCBox__QBE_AV0_ABVbCMatrix3___Z( bCBox const *, bCBox *, bCMatrix3 const * );
// ??DbCBox@@QBE?AV0@ABVbCMatrix@@@Z public: bCBox __thiscall bCBox::operator*(bCMatrix const &)const
bCBox * __thiscall __DbCBox__QBE_AV0_ABVbCMatrix___Z( bCBox const *, bCBox *, bCMatrix const * );
// ??DbCBox@@QBE?AV0@M@Z public: bCBox __thiscall bCBox::operator*(float)const
bCBox * __thiscall __DbCBox__QBE_AV0_M_Z( bCBox const *, bCBox *, GEFloat );
// ??GbCBox@@QBE?AV0@ABVbCVector@@@Z public: bCBox __thiscall bCBox::operator-(bCVector const &)const
bCBox * __thiscall __GbCBox__QBE_AV0_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ??HbCBox@@QBE?AV0@ABVbCVector@@@Z public: bCBox __thiscall bCBox::operator+(bCVector const &)const
bCBox * __thiscall __HbCBox__QBE_AV0_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ??KbCBox@@QBE?AV0@M@Z public: bCBox __thiscall bCBox::operator/(float)const
bCBox * __thiscall __KbCBox__QBE_AV0_M_Z( bCBox const *, bCBox *, GEFloat );
// ??XbCBox@@QAEAAV0@ABVbCMatrix3@@@Z public: bCBox & __thiscall bCBox::operator*=(bCMatrix3 const &)
bCBox * __thiscall __XbCBox__QAEAAV0_ABVbCMatrix3___Z( bCBox *, bCMatrix3 const * );
// ??XbCBox@@QAEAAV0@ABVbCMatrix@@@Z public: bCBox & __thiscall bCBox::operator*=(bCMatrix const &)
bCBox * __thiscall __XbCBox__QAEAAV0_ABVbCMatrix___Z( bCBox *, bCMatrix const * );
// ??XbCBox@@QAEAAV0@M@Z public: bCBox & __thiscall bCBox::operator*=(float)
bCBox * __thiscall __XbCBox__QAEAAV0_M_Z( bCBox *, GEFloat );
// ??YbCBox@@QAEAAV0@ABVbCVector@@@Z public: bCBox & __thiscall bCBox::operator+=(bCVector const &)
bCBox * __thiscall __YbCBox__QAEAAV0_ABVbCVector___Z( bCBox *, bCVector const * );
// ??ZbCBox@@QAEAAV0@ABVbCVector@@@Z public: bCBox & __thiscall bCBox::operator-=(bCVector const &)
bCBox * __thiscall __ZbCBox__QAEAAV0_ABVbCVector___Z( bCBox *, bCVector const * );
// ??_0bCBox@@QAEAAV0@M@Z public: bCBox & __thiscall bCBox::operator/=(float)
bCBox * __thiscall ___0bCBox__QAEAAV0_M_Z( bCBox *, GEFloat );
// ??_4bCBox@@QAEAAV0@ABV0@@Z public: bCBox & __thiscall bCBox::operator&=(bCBox const &)
bCBox * __thiscall ___4bCBox__QAEAAV0_ABV0__Z( bCBox *, bCBox const * );
// ??_5bCBox@@QAEAAV0@ABV0@@Z public: bCBox & __thiscall bCBox::operator|=(bCBox const &)
bCBox * __thiscall ___5bCBox__QAEAAV0_ABV0__Z( bCBox *, bCBox const * );
// ??_5bCBox@@QAEAAV0@ABVbCVector@@@Z public: bCBox & __thiscall bCBox::operator|=(bCVector const &)
bCBox * __thiscall ___5bCBox__QAEAAV0_ABVbCVector___Z( bCBox *, bCVector const * );
// ?AccessCoordinate@bCBox@@QAEAAMH@Z public: float & __thiscall bCBox::AccessCoordinate(int)
GEFloat * __thiscall _AccessCoordinate_bCBox__QAEAAMH_Z( bCBox *, bCBox_bECoordinate );
// ?AccessMax@bCBox@@QAEAAVbCVector@@XZ public: bCVector & __thiscall bCBox::AccessMax(void)
bCVector * __thiscall _AccessMax_bCBox__QAEAAVbCVector__XZ( bCBox * );
// ?AccessMin@bCBox@@QAEAAVbCVector@@XZ public: bCVector & __thiscall bCBox::AccessMin(void)
bCVector * __thiscall _AccessMin_bCBox__QAEAAVbCVector__XZ( bCBox * );
// ?Clear@bCBox@@QAEXXZ public: void __thiscall bCBox::Clear(void)
void __thiscall _Clear_bCBox__QAEXXZ( bCBox * );
// ?Contains@bCBox@@QBE_NABV1@@Z public: bool __thiscall bCBox::Contains(bCBox const &)const
GEBool __thiscall _Contains_bCBox__QBE_NABV1__Z( bCBox const *, bCBox const * );
// ?Contains@bCBox@@QBE_NABVbCFrustum@@@Z public: bool __thiscall bCBox::Contains(bCFrustum const &)const
GEBool __thiscall _Contains_bCBox__QBE_NABVbCFrustum___Z( bCBox const *, bCFrustum const * );
// ?Contains@bCBox@@QBE_NABVbCSphere@@@Z public: bool __thiscall bCBox::Contains(bCSphere const &)const
GEBool __thiscall _Contains_bCBox__QBE_NABVbCSphere___Z( bCBox const *, bCSphere const * );
// ?Contains@bCBox@@QBE_NABVbCStretch@@@Z public: bool __thiscall bCBox::Contains(bCStretch const &)const
GEBool __thiscall _Contains_bCBox__QBE_NABVbCStretch___Z( bCBox const *, bCStretch const * );
// ?Contains@bCBox@@QBE_NABVbCTriangle@@@Z public: bool __thiscall bCBox::Contains(bCTriangle const &)const
GEBool __thiscall _Contains_bCBox__QBE_NABVbCTriangle___Z( bCBox const *, bCTriangle const * );
// ?Contains@bCBox@@QBE_NABVbCUnitedRay@@@Z public: bool __thiscall bCBox::Contains(bCUnitedRay const &)const
GEBool __thiscall _Contains_bCBox__QBE_NABVbCUnitedRay___Z( bCBox const *, bCUnitedRay const * );
// ?Contains@bCBox@@QBE_NABVbCVector@@@Z public: bool __thiscall bCBox::Contains(bCVector const &)const
GEBool __thiscall _Contains_bCBox__QBE_NABVbCVector___Z( bCBox const *, bCVector const * );
// ?Contains@bCBox@@QBE_NQBVbCVector@@@Z public: bool __thiscall bCBox::Contains(bCVector const * const)const
GEBool __thiscall _Contains_bCBox__QBE_NQBVbCVector___Z( bCBox const *, bCVector const [ bCTriangle_bEVector_Count ] );
// ?Cull@bCBox@@QBE_NABV1@@Z public: bool __thiscall bCBox::Cull(bCBox const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABV1__Z( bCBox const *, bCBox const * );
// ?Cull@bCBox@@QBE_NABVbCFrustum@@@Z public: bool __thiscall bCBox::Cull(bCFrustum const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCFrustum___Z( bCBox const *, bCFrustum const * );
// ?Cull@bCBox@@QBE_NABVbCLine@@@Z public: bool __thiscall bCBox::Cull(bCLine const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCLine___Z( bCBox const *, bCLine const * );
// ?Cull@bCBox@@QBE_NABVbCPlane@@@Z public: bool __thiscall bCBox::Cull(bCPlane const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCPlane___Z( bCBox const *, bCPlane const * );
// ?Cull@bCBox@@QBE_NABVbCRay@@@Z public: bool __thiscall bCBox::Cull(bCRay const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCRay___Z( bCBox const *, bCRay const * );
// ?Cull@bCBox@@QBE_NABVbCSphere@@@Z public: bool __thiscall bCBox::Cull(bCSphere const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCSphere___Z( bCBox const *, bCSphere const * );
// ?Cull@bCBox@@QBE_NABVbCStretch@@@Z public: bool __thiscall bCBox::Cull(bCStretch const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCStretch___Z( bCBox const *, bCStretch const * );
// ?Cull@bCBox@@QBE_NABVbCTriangle@@@Z public: bool __thiscall bCBox::Cull(bCTriangle const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCTriangle___Z( bCBox const *, bCTriangle const * );
// ?Cull@bCBox@@QBE_NABVbCUnitedRay@@@Z public: bool __thiscall bCBox::Cull(bCUnitedRay const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCUnitedRay___Z( bCBox const *, bCUnitedRay const * );
// ?Cull@bCBox@@QBE_NABVbCVector@@@Z public: bool __thiscall bCBox::Cull(bCVector const &)const
GEBool __thiscall _Cull_bCBox__QBE_NABVbCVector___Z( bCBox const *, bCVector const * );
// ?Cull@bCBox@@QBE_NQBVbCVector@@@Z public: bool __thiscall bCBox::Cull(bCVector const * const)const
GEBool __thiscall _Cull_bCBox__QBE_NQBVbCVector___Z( bCBox const *, bCVector const [ bCTriangle_bEVector_Count ] );
// ?GetCenter@bCBox@@QBE?AVbCVector@@XZ public: bCVector __thiscall bCBox::GetCenter(void)const
bCVector * __thiscall _GetCenter_bCBox__QBE_AVbCVector__XZ( bCBox const *, bCVector * );
// ?GetCenter@bCBox@@QBEXAAVbCVector@@@Z public: void __thiscall bCBox::GetCenter(bCVector &)const
void __thiscall _GetCenter_bCBox__QBEXAAVbCVector___Z( bCBox const *, bCVector * );
// ?GetCenterGround@bCBox@@QBE?AVbCVector@@XZ public: bCVector __thiscall bCBox::GetCenterGround(void)const
bCVector * __thiscall _GetCenterGround_bCBox__QBE_AVbCVector__XZ( bCBox const *, bCVector * );
// ?GetCenterGround@bCBox@@QBEXAAVbCVector@@@Z public: void __thiscall bCBox::GetCenterGround(bCVector &)const
void __thiscall _GetCenterGround_bCBox__QBEXAAVbCVector___Z( bCBox const *, bCVector * );
// ?GetCoordinate@bCBox@@QBEMH@Z public: float __thiscall bCBox::GetCoordinate(int)const
GEFloat __thiscall _GetCoordinate_bCBox__QBEMH_Z( bCBox const *, bCBox_bECoordinate );
// ?GetCoordinate@bCBox@@QBEXHAAM@Z public: void __thiscall bCBox::GetCoordinate(int,float &)const
void __thiscall _GetCoordinate_bCBox__QBEXHAAM_Z( bCBox const *, bCBox_bECoordinate, GEFloat * );
// ?GetDepth@bCBox@@QBEMXZ public: float __thiscall bCBox::GetDepth(void)const
GEFloat __thiscall _GetDepth_bCBox__QBEMXZ( bCBox const * );
// ?GetHeight@bCBox@@QBEMXZ public: float __thiscall bCBox::GetHeight(void)const
GEFloat __thiscall _GetHeight_bCBox__QBEMXZ( bCBox const * );
// ?GetIntersected@bCBox@@QBE?AV1@ABV1@@Z public: bCBox __thiscall bCBox::GetIntersected(bCBox const &)const
bCBox * __thiscall _GetIntersected_bCBox__QBE_AV1_ABV1__Z( bCBox const *, bCBox *, bCBox const * );
// ?GetIntersection@bCBox@@QBE?AW4bEIntersection@1@ABV1@@Z public: bCBox::bEIntersection __thiscall bCBox::GetIntersection(bCBox const &)const
bCBox_bEIntersection __thiscall _GetIntersection_bCBox__QBE_AW4bEIntersection_1_ABV1__Z( bCBox const *, bCBox const * );
// ?GetIntersectionDistance@bCBox@@QBEMABVbCLine@@@Z public: float __thiscall bCBox::GetIntersectionDistance(bCLine const &)const
GEFloat __thiscall _GetIntersectionDistance_bCBox__QBEMABVbCLine___Z( bCBox const *, bCLine const * );
// ?GetIntersectionDistance@bCBox@@QBEMABVbCRay@@@Z public: float __thiscall bCBox::GetIntersectionDistance(bCRay const &)const
GEFloat __thiscall _GetIntersectionDistance_bCBox__QBEMABVbCRay___Z( bCBox const *, bCRay const * );
// ?GetIntersectionDistance@bCBox@@QBEMABVbCStretch@@@Z public: float __thiscall bCBox::GetIntersectionDistance(bCStretch const &)const
GEFloat __thiscall _GetIntersectionDistance_bCBox__QBEMABVbCStretch___Z( bCBox const *, bCStretch const * );
// ?GetInvScaled@bCBox@@QBE?AV1@ABVbCVector@@@Z public: bCBox __thiscall bCBox::GetInvScaled(bCVector const &)const
bCBox * __thiscall _GetInvScaled_bCBox__QBE_AV1_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ?GetInvScaled@bCBox@@QBE?AV1@M@Z public: bCBox __thiscall bCBox::GetInvScaled(float)const
bCBox * __thiscall _GetInvScaled_bCBox__QBE_AV1_M_Z( bCBox const *, bCBox *, GEFloat );
// ?GetInvTranslated@bCBox@@QBE?AV1@ABVbCVector@@@Z public: bCBox __thiscall bCBox::GetInvTranslated(bCVector const &)const
bCBox * __thiscall _GetInvTranslated_bCBox__QBE_AV1_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ?GetInvTranslated@bCBox@@QBE?AV1@M@Z public: bCBox __thiscall bCBox::GetInvTranslated(float)const
bCBox * __thiscall _GetInvTranslated_bCBox__QBE_AV1_M_Z( bCBox const *, bCBox *, GEFloat );
// ?GetMagnitude@bCBox@@QBE?AVbCVector@@XZ public: bCVector __thiscall bCBox::GetMagnitude(void)const
bCVector * __thiscall _GetMagnitude_bCBox__QBE_AVbCVector__XZ( bCBox const *, bCVector * );
// ?GetMagnitude@bCBox@@QBEXAAVbCVector@@@Z public: void __thiscall bCBox::GetMagnitude(bCVector &)const
void __thiscall _GetMagnitude_bCBox__QBEXAAVbCVector___Z( bCBox const *, bCVector * );
// ?GetMax@bCBox@@QBEABVbCVector@@XZ public: bCVector const & __thiscall bCBox::GetMax(void)const
bCVector const * __thiscall _GetMax_bCBox__QBEABVbCVector__XZ( bCBox const * );
// ?GetMax@bCBox@@QBEXAAVbCVector@@@Z public: void __thiscall bCBox::GetMax(bCVector &)const
void __thiscall _GetMax_bCBox__QBEXAAVbCVector___Z( bCBox const *, bCVector * );
// ?GetMaxExtend@bCBox@@QBEMXZ public: float __thiscall bCBox::GetMaxExtend(void)const
GEFloat __thiscall _GetMaxExtend_bCBox__QBEMXZ( bCBox const * );
// ?GetMerged@bCBox@@QBE?AV1@ABV1@@Z public: bCBox __thiscall bCBox::GetMerged(bCBox const &)const
bCBox * __thiscall _GetMerged_bCBox__QBE_AV1_ABV1__Z( bCBox const *, bCBox *, bCBox const * );
// ?GetMerged@bCBox@@QBE?AV1@ABVbCVector@@@Z public: bCBox __thiscall bCBox::GetMerged(bCVector const &)const
bCBox * __thiscall _GetMerged_bCBox__QBE_AV1_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ?GetMin@bCBox@@QBEABVbCVector@@XZ public: bCVector const & __thiscall bCBox::GetMin(void)const
bCVector const * __thiscall _GetMin_bCBox__QBEABVbCVector__XZ( bCBox const * );
// ?GetMin@bCBox@@QBEXAAVbCVector@@@Z public: void __thiscall bCBox::GetMin(bCVector &)const
void __thiscall _GetMin_bCBox__QBEXAAVbCVector___Z( bCBox const *, bCVector * );
// ?GetMinExtend@bCBox@@QBEMXZ public: float __thiscall bCBox::GetMinExtend(void)const
GEFloat __thiscall _GetMinExtend_bCBox__QBEMXZ( bCBox const * );
// ?GetNormalized@bCBox@@QBE?AV1@XZ public: bCBox __thiscall bCBox::GetNormalized(void)const
bCBox * __thiscall _GetNormalized_bCBox__QBE_AV1_XZ( bCBox const *, bCBox * );
// ?GetScaled@bCBox@@QBE?AV1@ABVbCVector@@@Z public: bCBox __thiscall bCBox::GetScaled(bCVector const &)const
bCBox * __thiscall _GetScaled_bCBox__QBE_AV1_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ?GetScaled@bCBox@@QBE?AV1@M@Z public: bCBox __thiscall bCBox::GetScaled(float)const
bCBox * __thiscall _GetScaled_bCBox__QBE_AV1_M_Z( bCBox const *, bCBox *, GEFloat );
// ?GetShrunk@bCBox@@QBE?AV1@ABVbCVector@@@Z public: bCBox __thiscall bCBox::GetShrunk(bCVector const &)const
bCBox * __thiscall _GetShrunk_bCBox__QBE_AV1_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ?GetShrunk@bCBox@@QBE?AV1@M@Z public: bCBox __thiscall bCBox::GetShrunk(float)const
bCBox * __thiscall _GetShrunk_bCBox__QBE_AV1_M_Z( bCBox const *, bCBox *, GEFloat );
// ?GetTransformed@bCBox@@QBE?AV1@ABVbCMatrix3@@@Z public: bCBox __thiscall bCBox::GetTransformed(bCMatrix3 const &)const
bCBox * __thiscall _GetTransformed_bCBox__QBE_AV1_ABVbCMatrix3___Z( bCBox const *, bCBox *, bCMatrix3 const * );
// ?GetTransformed@bCBox@@QBE?AV1@ABVbCMatrix@@@Z public: bCBox __thiscall bCBox::GetTransformed(bCMatrix const &)const
bCBox * __thiscall _GetTransformed_bCBox__QBE_AV1_ABVbCMatrix___Z( bCBox const *, bCBox *, bCMatrix const * );
// ?GetTranslated@bCBox@@QBE?AV1@ABVbCVector@@@Z public: bCBox __thiscall bCBox::GetTranslated(bCVector const &)const
bCBox * __thiscall _GetTranslated_bCBox__QBE_AV1_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ?GetTranslated@bCBox@@QBE?AV1@M@Z public: bCBox __thiscall bCBox::GetTranslated(float)const
bCBox * __thiscall _GetTranslated_bCBox__QBE_AV1_M_Z( bCBox const *, bCBox *, GEFloat );
// ?GetVertex@bCBox@@QBE?AVbCVector@@H@Z public: bCVector __thiscall bCBox::GetVertex(int)const
bCVector * __thiscall _GetVertex_bCBox__QBE_AVbCVector__H_Z( bCBox const *, bCVector *, bCBox_bEVertex );
// ?GetVertex@bCBox@@QBEXHAAVbCVector@@@Z public: void __thiscall bCBox::GetVertex(int,bCVector &)const
void __thiscall _GetVertex_bCBox__QBEXHAAVbCVector___Z( bCBox const *, bCBox_bEVertex, bCVector * );
// ?GetVolume@bCBox@@QBEMXZ public: float __thiscall bCBox::GetVolume(void)const
GEFloat __thiscall _GetVolume_bCBox__QBEMXZ( bCBox const * );
// ?GetWidened@bCBox@@QBE?AV1@ABVbCVector@@@Z public: bCBox __thiscall bCBox::GetWidened(bCVector const &)const
bCBox * __thiscall _GetWidened_bCBox__QBE_AV1_ABVbCVector___Z( bCBox const *, bCBox *, bCVector const * );
// ?GetWidened@bCBox@@QBE?AV1@M@Z public: bCBox __thiscall bCBox::GetWidened(float)const
bCBox * __thiscall _GetWidened_bCBox__QBE_AV1_M_Z( bCBox const *, bCBox *, GEFloat );
// ?GetWidth@bCBox@@QBEMXZ public: float __thiscall bCBox::GetWidth(void)const
GEFloat __thiscall _GetWidth_bCBox__QBEMXZ( bCBox const * );
// ?Intersect@bCBox@@QAEXABV1@@Z public: void __thiscall bCBox::Intersect(bCBox const &)
void __thiscall _Intersect_bCBox__QAEXABV1__Z( bCBox *, bCBox const * );
// ?Intersects@bCBox@@QBE_NABV1@@Z public: bool __thiscall bCBox::Intersects(bCBox const &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABV1__Z( bCBox const *, bCBox const * );
// ?Intersects@bCBox@@QBE_NABVbCFrustum@@@Z public: bool __thiscall bCBox::Intersects(bCFrustum const &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCFrustum___Z( bCBox const *, bCFrustum const * );
// ?Intersects@bCBox@@QBE_NABVbCLine@@AAM@Z public: bool __thiscall bCBox::Intersects(bCLine const &,float &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCLine__AAM_Z( bCBox const *, bCLine const *, GEFloat * );
// ?Intersects@bCBox@@QBE_NABVbCPlane@@@Z public: bool __thiscall bCBox::Intersects(bCPlane const &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCPlane___Z( bCBox const *, bCPlane const * );
// ?Intersects@bCBox@@QBE_NABVbCRay@@AAM@Z public: bool __thiscall bCBox::Intersects(bCRay const &,float &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCRay__AAM_Z( bCBox const *, bCRay const *, GEFloat * );
// ?Intersects@bCBox@@QBE_NABVbCSphere@@@Z public: bool __thiscall bCBox::Intersects(bCSphere const &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCSphere___Z( bCBox const *, bCSphere const * );
// ?Intersects@bCBox@@QBE_NABVbCStretch@@AAM@Z public: bool __thiscall bCBox::Intersects(bCStretch const &,float &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCStretch__AAM_Z( bCBox const *, bCStretch const *, GEFloat * );
// ?Intersects@bCBox@@QBE_NABVbCTriangle@@@Z public: bool __thiscall bCBox::Intersects(bCTriangle const &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCTriangle___Z( bCBox const *, bCTriangle const * );
// ?Intersects@bCBox@@QBE_NABVbCUnitedRay@@AAM@Z public: bool __thiscall bCBox::Intersects(bCUnitedRay const &,float &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCUnitedRay__AAM_Z( bCBox const *, bCUnitedRay const *, GEFloat * );
// ?Intersects@bCBox@@QBE_NABVbCVector@@@Z public: bool __thiscall bCBox::Intersects(bCVector const &)const
GEBool __thiscall _Intersects_bCBox__QBE_NABVbCVector___Z( bCBox const *, bCVector const * );
// ?Intersects@bCBox@@QBE_NQBVbCVector@@@Z public: bool __thiscall bCBox::Intersects(bCVector const * const)const
GEBool __thiscall _Intersects_bCBox__QBE_NQBVbCVector___Z( bCBox const *, bCVector const [ bCTriangle_bEVector_Count ] );
// ?IntersectsExclusive@bCBox@@QBE_NABV1@@Z public: bool __thiscall bCBox::IntersectsExclusive(bCBox const &)const
GEBool __thiscall _IntersectsExclusive_bCBox__QBE_NABV1__Z( bCBox const *, bCBox const * );
// ?IntersectsSweep@bCBox@@QBE_NABV1@00AAM@Z public: bool __thiscall bCBox::IntersectsSweep(bCBox const &,bCBox const &,bCBox const &,float &)const
GEBool __thiscall _IntersectsSweep_bCBox__QBE_NABV1_00AAM_Z( bCBox const *, bCBox const *, bCBox const *, bCBox const *, GEFloat * );
// ?IntersectsSweep@bCBox@@QBE_NABV1@0AAM@Z public: bool __thiscall bCBox::IntersectsSweep(bCBox const &,bCBox const &,float &)const
GEBool __thiscall _IntersectsSweep_bCBox__QBE_NABV1_0AAM_Z( bCBox const *, bCBox const *, bCBox const *, GEFloat * );
// ?IntersectsSweep@bCBox@@QBE_NABVbCVector@@ABV1@0AAM@Z public: bool __thiscall bCBox::IntersectsSweep(bCVector const &,bCBox const &,bCVector const &,float &)const
GEBool __thiscall _IntersectsSweep_bCBox__QBE_NABVbCVector__ABV1_0AAM_Z( bCBox const *, bCVector const *, bCBox const *, bCVector const *, GEFloat * );
// ?IntersectsSweep@bCBox@@QBE_NABVbCVector@@ABV1@AAM@Z public: bool __thiscall bCBox::IntersectsSweep(bCVector const &,bCBox const &,float &)const
GEBool __thiscall _IntersectsSweep_bCBox__QBE_NABVbCVector__ABV1_AAM_Z( bCBox const *, bCVector const *, bCBox const *, GEFloat * );
// ?InvScale@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::InvScale(bCVector const &)
void __thiscall _InvScale_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?InvScale@bCBox@@QAEXM@Z public: void __thiscall bCBox::InvScale(float)
void __thiscall _InvScale_bCBox__QAEXM_Z( bCBox *, GEFloat );
// ?InvTranslate@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::InvTranslate(bCVector const &)
void __thiscall _InvTranslate_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?InvTranslate@bCBox@@QAEXM@Z public: void __thiscall bCBox::InvTranslate(float)
void __thiscall _InvTranslate_bCBox__QAEXM_Z( bCBox *, GEFloat );
// ?Invalidate@bCBox@@QAEXXZ public: void __thiscall bCBox::Invalidate(void)
void __thiscall _Invalidate_bCBox__QAEXXZ( bCBox * );
// ?IsEqual@bCBox@@QBE_NABV1@@Z public: bool __thiscall bCBox::IsEqual(bCBox const &)const
GEBool __thiscall _IsEqual_bCBox__QBE_NABV1__Z( bCBox const *, bCBox const * );
// ?IsNormalized@bCBox@@QBE_NXZ public: bool __thiscall bCBox::IsNormalized(void)const
GEBool __thiscall _IsNormalized_bCBox__QBE_NXZ( bCBox const * );
// ?IsValid@bCBox@@QBE_NXZ public: bool __thiscall bCBox::IsValid(void)const
GEBool __thiscall _IsValid_bCBox__QBE_NXZ( bCBox const * );
// ?Merge@bCBox@@QAEXABV1@@Z public: void __thiscall bCBox::Merge(bCBox const &)
void __thiscall _Merge_bCBox__QAEXABV1__Z( bCBox *, bCBox const * );
// ?Merge@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::Merge(bCVector const &)
void __thiscall _Merge_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?Normalize@bCBox@@QAEXXZ public: void __thiscall bCBox::Normalize(void)
void __thiscall _Normalize_bCBox__QAEXXZ( bCBox * );
// ?Scale@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::Scale(bCVector const &)
void __thiscall _Scale_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?Scale@bCBox@@QAEXM@Z public: void __thiscall bCBox::Scale(float)
void __thiscall _Scale_bCBox__QAEXM_Z( bCBox *, GEFloat );
// ?Separates@bCBox@@QBE_NPBVbCVector@@HABV2@@Z public: bool __thiscall bCBox::Separates(bCVector const *,int,bCVector const &)const
GEBool __thiscall _Separates_bCBox__QBE_NPBVbCVector__HABV2__Z( bCBox const *, bCVector const *, GEInt, bCVector const * );
// ?SetBox@bCBox@@QAEXABV1@@Z public: void __thiscall bCBox::SetBox(bCBox const &)
void __thiscall _SetBox_bCBox__QAEXABV1__Z( bCBox *, bCBox const * );
// ?SetBox@bCBox@@QAEXABVbCVector@@0@Z public: void __thiscall bCBox::SetBox(bCVector const &,bCVector const &)
void __thiscall _SetBox_bCBox__QAEXABVbCVector__0_Z( bCBox *, bCVector const *, bCVector const * );
// ?SetBox@bCBox@@QAEXABVbCVector@@M@Z public: void __thiscall bCBox::SetBox(bCVector const &,float)
void __thiscall _SetBox_bCBox__QAEXABVbCVector__M_Z( bCBox *, bCVector const *, GEFloat );
// ?SetCenter@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::SetCenter(bCVector const &)
void __thiscall _SetCenter_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?SetCoordinate@bCBox@@QAEXHM@Z public: void __thiscall bCBox::SetCoordinate(int,float)
void __thiscall _SetCoordinate_bCBox__QAEXHM_Z( bCBox *, bCBox_bECoordinate, GEFloat );
// ?SetMax@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::SetMax(bCVector const &)
void __thiscall _SetMax_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?SetMin@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::SetMin(bCVector const &)
void __thiscall _SetMin_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?Shrink@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::Shrink(bCVector const &)
void __thiscall _Shrink_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?Shrink@bCBox@@QAEXM@Z public: void __thiscall bCBox::Shrink(float)
void __thiscall _Shrink_bCBox__QAEXM_Z( bCBox *, GEFloat );
// ?Transform@bCBox@@QAEXABVbCMatrix3@@@Z public: void __thiscall bCBox::Transform(bCMatrix3 const &)
void __thiscall _Transform_bCBox__QAEXABVbCMatrix3___Z( bCBox *, bCMatrix3 const * );
// ?Transform@bCBox@@QAEXABVbCMatrix@@@Z public: void __thiscall bCBox::Transform(bCMatrix const &)
void __thiscall _Transform_bCBox__QAEXABVbCMatrix___Z( bCBox *, bCMatrix const * );
// ?Translate@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::Translate(bCVector const &)
void __thiscall _Translate_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?Translate@bCBox@@QAEXM@Z public: void __thiscall bCBox::Translate(float)
void __thiscall _Translate_bCBox__QAEXM_Z( bCBox *, GEFloat );
// ?Widen@bCBox@@QAEXABVbCVector@@@Z public: void __thiscall bCBox::Widen(bCVector const &)
void __thiscall _Widen_bCBox__QAEXABVbCVector___Z( bCBox *, bCVector const * );
// ?Widen@bCBox@@QAEXM@Z public: void __thiscall bCBox::Widen(float)
void __thiscall _Widen_bCBox__QAEXM_Z( bCBox *, GEFloat );
// ?m_fDummy@bCBox@@1MA protected: static float bCBox::m_fDummy
GEFloat DLLIMPORT _m_fDummy_bCBox__1MA;

// ?GetCenter@?$bTVolume@VbCBox@@@@UBEXAAVbCVector@@@Z public: virtual void __thiscall bTVolume<bCBox>::GetCenter(bCVector &)const
void __thiscall _GetCenter___bTVolume_VbCBox____UBEXAAVbCVector___Z( bTVolume_bCBox const *, bCVector * );
