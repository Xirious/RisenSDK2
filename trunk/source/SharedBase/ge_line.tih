struct bCLine
{
    bCVector m_vecOrigin;
    bCVector m_vecDirection;
};
// ??0bCLine@@QAE@ABV0@@Z public: __thiscall bCLine::bCLine(bCLine const &)
bCLine * __thiscall __0bCLine__QAE_ABV0__Z( bCLine *, bCLine const * );
// ??0bCLine@@QAE@XZ public: __thiscall bCLine::bCLine(void)
bCLine * __thiscall __0bCLine__QAE_XZ( bCLine * );
// ??1bCLine@@QAE@XZ public: __thiscall bCLine::~bCLine(void)
void __thiscall __1bCLine__QAE_XZ( bCLine * );
// ??4bCLine@@QAEAAV0@ABV0@@Z public: bCLine & __thiscall bCLine::operator=(bCLine const &)
bCLine * __thiscall __4bCLine__QAEAAV0_ABV0__Z( bCLine *, bCLine const * );
// ??5bCLine@@QBEAAVbCOStream@@AAV1@@Z public: bCOStream & __thiscall bCLine::operator>>(bCOStream &)const
bCOStream * __thiscall __5bCLine__QBEAAVbCOStream__AAV1__Z( bCLine const *, bCOStream * );
// ??6bCLine@@QAEAAVbCIStream@@AAV1@@Z public: bCIStream & __thiscall bCLine::operator<<(bCIStream &)
bCIStream * __thiscall __6bCLine__QAEAAVbCIStream__AAV1__Z( bCLine *, bCIStream * );
// ??DbCLine@@QBE?AV0@ABVbCMatrix3@@@Z public: bCLine __thiscall bCLine::operator*(bCMatrix3 const &)const
bCLine * __thiscall __DbCLine__QBE_AV0_ABVbCMatrix3___Z( bCLine const *, bCLine *, bCMatrix3 const * );
// ??DbCLine@@QBE?AV0@ABVbCMatrix@@@Z public: bCLine __thiscall bCLine::operator*(bCMatrix const &)const
bCLine * __thiscall __DbCLine__QBE_AV0_ABVbCMatrix___Z( bCLine const *, bCLine *, bCMatrix const * );
// ??GbCLine@@QBE?AV0@ABVbCVector@@@Z public: bCLine __thiscall bCLine::operator-(bCVector const &)const
bCLine * __thiscall __GbCLine__QBE_AV0_ABVbCVector___Z( bCLine const *, bCLine *, bCVector const * );
// ??HbCLine@@QBE?AV0@ABVbCVector@@@Z public: bCLine __thiscall bCLine::operator+(bCVector const &)const
bCLine * __thiscall __HbCLine__QBE_AV0_ABVbCVector___Z( bCLine const *, bCLine *, bCVector const * );
// ??KbCLine@@QBE?AV0@ABVbCMatrix3@@@Z public: bCLine __thiscall bCLine::operator/(bCMatrix3 const &)const
bCLine * __thiscall __KbCLine__QBE_AV0_ABVbCMatrix3___Z( bCLine const *, bCLine *, bCMatrix3 const * );
// ??KbCLine@@QBE?AV0@ABVbCMatrix@@@Z public: bCLine __thiscall bCLine::operator/(bCMatrix const &)const
bCLine * __thiscall __KbCLine__QBE_AV0_ABVbCMatrix___Z( bCLine const *, bCLine *, bCMatrix const * );
// ??YbCLine@@QAEAAV0@ABVbCVector@@@Z public: bCLine & __thiscall bCLine::operator+=(bCVector const &)
bCLine * __thiscall __YbCLine__QAEAAV0_ABVbCVector___Z( bCLine *, bCVector const * );
// ??ZbCLine@@QAEAAV0@ABVbCVector@@@Z public: bCLine & __thiscall bCLine::operator-=(bCVector const &)
bCLine * __thiscall __ZbCLine__QAEAAV0_ABVbCVector___Z( bCLine *, bCVector const * );
// ?AccessDirection@bCLine@@QAEAAVbCVector@@XZ public: bCVector & __thiscall bCLine::AccessDirection(void)
bCVector * __thiscall _AccessDirection_bCLine__QAEAAVbCVector__XZ( bCLine * );
// ?AccessOrigin@bCLine@@QAEAAVbCVector@@XZ public: bCVector & __thiscall bCLine::AccessOrigin(void)
bCVector * __thiscall _AccessOrigin_bCLine__QAEAAVbCVector__XZ( bCLine * );
// ?Clear@bCLine@@QAEXXZ public: void __thiscall bCLine::Clear(void)
void __thiscall _Clear_bCLine__QAEXXZ( bCLine * );
// ?CopyFrom@bCLine@@QAEXABV1@@Z public: void __thiscall bCLine::CopyFrom(bCLine const &)
void __thiscall _CopyFrom_bCLine__QAEXABV1__Z( bCLine *, bCLine const * );
// ?CopyTo@bCLine@@QBEXAAV1@@Z public: void __thiscall bCLine::CopyTo(bCLine &)const
void __thiscall _CopyTo_bCLine__QBEXAAV1__Z( bCLine const *, bCLine * );
// ?GetDirection@bCLine@@QBEABVbCVector@@XZ public: bCVector const & __thiscall bCLine::GetDirection(void)const
bCVector const * __thiscall _GetDirection_bCLine__QBEABVbCVector__XZ( bCLine const * );
// ?GetDirection@bCLine@@QBEXAAVbCVector@@@Z public: void __thiscall bCLine::GetDirection(bCVector &)const
void __thiscall _GetDirection_bCLine__QBEXAAVbCVector___Z( bCLine const *, bCVector * );
// ?GetIntersectionDistance@bCLine@@QBEMABVbCBox@@@Z public: float __thiscall bCLine::GetIntersectionDistance(bCBox const &)const
GEFloat __thiscall _GetIntersectionDistance_bCLine__QBEMABVbCBox___Z( bCLine const *, bCBox const * );
// ?GetIntersectionDistance@bCLine@@QBEMABVbCPlane@@@Z public: float __thiscall bCLine::GetIntersectionDistance(bCPlane const &)const
GEFloat __thiscall _GetIntersectionDistance_bCLine__QBEMABVbCPlane___Z( bCLine const *, bCPlane const * );
// ?GetIntersectionDistance@bCLine@@QBEMABVbCSphere@@@Z public: float __thiscall bCLine::GetIntersectionDistance(bCSphere const &)const
GEFloat __thiscall _GetIntersectionDistance_bCLine__QBEMABVbCSphere___Z( bCLine const *, bCSphere const * );
// ?GetIntersectionDistance@bCLine@@QBEMABVbCTriangle@@@Z public: float __thiscall bCLine::GetIntersectionDistance(bCTriangle const &)const
GEFloat __thiscall _GetIntersectionDistance_bCLine__QBEMABVbCTriangle___Z( bCLine const *, bCTriangle const * );
// ?GetInvTransformed@bCLine@@QBE?AV1@ABVbCMatrix3@@@Z public: bCLine __thiscall bCLine::GetInvTransformed(bCMatrix3 const &)const
bCLine * __thiscall _GetInvTransformed_bCLine__QBE_AV1_ABVbCMatrix3___Z( bCLine const *, bCLine *, bCMatrix3 const * );
// ?GetInvTransformed@bCLine@@QBE?AV1@ABVbCMatrix@@@Z public: bCLine __thiscall bCLine::GetInvTransformed(bCMatrix const &)const
bCLine * __thiscall _GetInvTransformed_bCLine__QBE_AV1_ABVbCMatrix___Z( bCLine const *, bCLine *, bCMatrix const * );
// ?GetInvTransformed@bCLine@@QBEXAAV1@ABVbCMatrix3@@@Z public: void __thiscall bCLine::GetInvTransformed(bCLine &,bCMatrix3 const &)const
void __thiscall _GetInvTransformed_bCLine__QBEXAAV1_ABVbCMatrix3___Z( bCLine const *, bCLine *, bCMatrix3 const * );
// ?GetInvTransformed@bCLine@@QBEXAAV1@VbCMatrix3@@@Z public: void __thiscall bCLine::GetInvTransformed(bCLine &,bCMatrix3)const
void __thiscall _GetInvTransformed_bCLine__QBEXAAV1_VbCMatrix3___Z( bCLine const *, bCLine *, bCMatrix3 );
// ?GetInvTranslated@bCLine@@QBE?AV1@ABVbCVector@@@Z public: bCLine __thiscall bCLine::GetInvTranslated(bCVector const &)const
bCLine * __thiscall _GetInvTranslated_bCLine__QBE_AV1_ABVbCVector___Z( bCLine const *, bCLine *, bCVector const * );
// ?GetInvTranslated@bCLine@@QBEXAAV1@ABVbCVector@@@Z public: void __thiscall bCLine::GetInvTranslated(bCLine &,bCVector const &)const
void __thiscall _GetInvTranslated_bCLine__QBEXAAV1_ABVbCVector___Z( bCLine const *, bCLine *, bCVector const * );
// ?GetOrigin@bCLine@@QBEABVbCVector@@XZ public: bCVector const & __thiscall bCLine::GetOrigin(void)const
bCVector const * __thiscall _GetOrigin_bCLine__QBEABVbCVector__XZ( bCLine const * );
// ?GetOrigin@bCLine@@QBEXAAVbCVector@@@Z public: void __thiscall bCLine::GetOrigin(bCVector &)const
void __thiscall _GetOrigin_bCLine__QBEXAAVbCVector___Z( bCLine const *, bCVector * );
// ?GetTransformed@bCLine@@QBE?AV1@ABVbCMatrix3@@@Z public: bCLine __thiscall bCLine::GetTransformed(bCMatrix3 const &)const
bCLine * __thiscall _GetTransformed_bCLine__QBE_AV1_ABVbCMatrix3___Z( bCLine const *, bCLine *, bCMatrix3 const * );
// ?GetTransformed@bCLine@@QBE?AV1@ABVbCMatrix@@@Z public: bCLine __thiscall bCLine::GetTransformed(bCMatrix const &)const
bCLine * __thiscall _GetTransformed_bCLine__QBE_AV1_ABVbCMatrix___Z( bCLine const *, bCLine *, bCMatrix const * );
// ?GetTransformed@bCLine@@QBEXAAV1@ABVbCMatrix3@@@Z public: void __thiscall bCLine::GetTransformed(bCLine &,bCMatrix3 const &)const
void __thiscall _GetTransformed_bCLine__QBEXAAV1_ABVbCMatrix3___Z( bCLine const *, bCLine *, bCMatrix3 const * );
// ?GetTransformed@bCLine@@QBEXAAV1@VbCMatrix3@@@Z public: void __thiscall bCLine::GetTransformed(bCLine &,bCMatrix3)const
void __thiscall _GetTransformed_bCLine__QBEXAAV1_VbCMatrix3___Z( bCLine const *, bCLine *, bCMatrix3 );
// ?GetTranslated@bCLine@@QBE?AV1@ABVbCVector@@@Z public: bCLine __thiscall bCLine::GetTranslated(bCVector const &)const
bCLine * __thiscall _GetTranslated_bCLine__QBE_AV1_ABVbCVector___Z( bCLine const *, bCLine *, bCVector const * );
// ?GetTranslated@bCLine@@QBEXAAV1@ABVbCVector@@@Z public: void __thiscall bCLine::GetTranslated(bCLine &,bCVector const &)const
void __thiscall _GetTranslated_bCLine__QBEXAAV1_ABVbCVector___Z( bCLine const *, bCLine *, bCVector const * );
// ?Intersects@bCLine@@QBE_NABVbCBox@@AAM@Z public: bool __thiscall bCLine::Intersects(bCBox const &,float &)const
GEBool __thiscall _Intersects_bCLine__QBE_NABVbCBox__AAM_Z( bCLine const *, bCBox const *, GEFloat * );
// ?Intersects@bCLine@@QBE_NABVbCFrustum@@AAM@Z public: bool __thiscall bCLine::Intersects(bCFrustum const &,float &)const
GEBool __thiscall _Intersects_bCLine__QBE_NABVbCFrustum__AAM_Z( bCLine const *, bCFrustum const *, GEFloat * );
// ?Intersects@bCLine@@QBE_NABVbCPlane@@AAM@Z public: bool __thiscall bCLine::Intersects(bCPlane const &,float &)const
GEBool __thiscall _Intersects_bCLine__QBE_NABVbCPlane__AAM_Z( bCLine const *, bCPlane const *, GEFloat * );
// ?Intersects@bCLine@@QBE_NABVbCSphere@@AAM@Z public: bool __thiscall bCLine::Intersects(bCSphere const &,float &)const
GEBool __thiscall _Intersects_bCLine__QBE_NABVbCSphere__AAM_Z( bCLine const *, bCSphere const *, GEFloat * );
// ?Intersects@bCLine@@QBE_NABVbCTriangle@@AAM@Z public: bool __thiscall bCLine::Intersects(bCTriangle const &,float &)const
GEBool __thiscall _Intersects_bCLine__QBE_NABVbCTriangle__AAM_Z( bCLine const *, bCTriangle const *, GEFloat * );
// ?Intersects@bCLine@@QBE_NABVbCTriangle@@W4bESides@2@AAM@Z public: bool __thiscall bCLine::Intersects(bCTriangle const &,bCTriangle::bESides,float &)const
GEBool __thiscall _Intersects_bCLine__QBE_NABVbCTriangle__W4bESides_2_AAM_Z( bCLine const *, bCTriangle const *, bCTriangle_bESides, GEFloat * );
// ?Intersects@bCLine@@QBE_NQBVbCVector@@AAM@Z public: bool __thiscall bCLine::Intersects(bCVector const * const,float &)const
GEBool __thiscall _Intersects_bCLine__QBE_NQBVbCVector__AAM_Z( bCLine const *, bCVector const [ bCTriangle_bEVector_Count ], GEFloat * );
// ?Intersects@bCLine@@QBE_NQBVbCVector@@W4bESides@bCTriangle@@AAM@Z public: bool __thiscall bCLine::Intersects(bCVector const * const,bCTriangle::bESides,float &)const
GEBool __thiscall _Intersects_bCLine__QBE_NQBVbCVector__W4bESides_bCTriangle__AAM_Z( bCLine const *, bCVector const [ bCTriangle_bEVector_Count ], bCTriangle_bESides, GEFloat * );
// ?InvTransform@bCLine@@QAEXABVbCMatrix3@@@Z public: void __thiscall bCLine::InvTransform(bCMatrix3 const &)
void __thiscall _InvTransform_bCLine__QAEXABVbCMatrix3___Z( bCLine *, bCMatrix3 const * );
// ?InvTransform@bCLine@@QAEXABVbCMatrix@@@Z public: void __thiscall bCLine::InvTransform(bCMatrix const &)
void __thiscall _InvTransform_bCLine__QAEXABVbCMatrix___Z( bCLine *, bCMatrix const * );
// ?InvTranslate@bCLine@@QAEXABVbCVector@@@Z public: void __thiscall bCLine::InvTranslate(bCVector const &)
void __thiscall _InvTranslate_bCLine__QAEXABVbCVector___Z( bCLine *, bCVector const * );
// ?SetDirection@bCLine@@QAEXABVbCVector@@@Z public: void __thiscall bCLine::SetDirection(bCVector const &)
void __thiscall _SetDirection_bCLine__QAEXABVbCVector___Z( bCLine *, bCVector const * );
// ?SetLine@bCLine@@QAEXABV1@@Z public: void __thiscall bCLine::SetLine(bCLine const &)
void __thiscall _SetLine_bCLine__QAEXABV1__Z( bCLine *, bCLine const * );
// ?SetLine@bCLine@@QAEXABVbCVector@@0@Z public: void __thiscall bCLine::SetLine(bCVector const &,bCVector const &)
void __thiscall _SetLine_bCLine__QAEXABVbCVector__0_Z( bCLine *, bCVector const *, bCVector const * );
// ?SetOrigin@bCLine@@QAEXABVbCVector@@@Z public: void __thiscall bCLine::SetOrigin(bCVector const &)
void __thiscall _SetOrigin_bCLine__QAEXABVbCVector___Z( bCLine *, bCVector const * );
// ?Transform@bCLine@@QAEXABVbCMatrix3@@@Z public: void __thiscall bCLine::Transform(bCMatrix3 const &)
void __thiscall _Transform_bCLine__QAEXABVbCMatrix3___Z( bCLine *, bCMatrix3 const * );
// ?Transform@bCLine@@QAEXABVbCMatrix@@@Z public: void __thiscall bCLine::Transform(bCMatrix const &)
void __thiscall _Transform_bCLine__QAEXABVbCMatrix___Z( bCLine *, bCMatrix const * );
// ?Translate@bCLine@@QAEXABVbCVector@@@Z public: void __thiscall bCLine::Translate(bCVector const &)
void __thiscall _Translate_bCLine__QAEXABVbCVector___Z( bCLine *, bCVector const * );
// ?m_fDummy@bCLine@@1MA protected: static float bCLine::m_fDummy
GEFloat DLLIMPORT _m_fDummy_bCLine__1MA;
