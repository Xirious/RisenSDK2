struct bCEulerAngles;
struct bCQuaternion;

struct bCAxisAngle
{
    bCVector m_vecAxis;
    GEFloat  m_fAngle;
};
// ??0bCAxisAngle@@QAE@ABV0@@Z public: __thiscall bCAxisAngle::bCAxisAngle(bCAxisAngle const &)
bCAxisAngle * __thiscall __0bCAxisAngle__QAE_ABV0__Z( bCAxisAngle *, bCAxisAngle const * );
// ??0bCAxisAngle@@QAE@ABVbCEulerAngles@@@Z public: __thiscall bCAxisAngle::bCAxisAngle(bCEulerAngles const &)
bCAxisAngle * __thiscall __0bCAxisAngle__QAE_ABVbCEulerAngles___Z( bCAxisAngle *, bCEulerAngles const * );
// ??0bCAxisAngle@@QAE@ABVbCQuaternion@@@Z public: __thiscall bCAxisAngle::bCAxisAngle(bCQuaternion const &)
bCAxisAngle * __thiscall __0bCAxisAngle__QAE_ABVbCQuaternion___Z( bCAxisAngle *, bCQuaternion const * );
// ??0bCAxisAngle@@QAE@ABVbCVector@@M@Z public: __thiscall bCAxisAngle::bCAxisAngle(bCVector const &,float)
bCAxisAngle * __thiscall __0bCAxisAngle__QAE_ABVbCVector__M_Z( bCAxisAngle *, bCVector const *, GEFloat );
// ??0bCAxisAngle@@QAE@XZ public: __thiscall bCAxisAngle::bCAxisAngle(void)
bCAxisAngle * __thiscall __0bCAxisAngle__QAE_XZ( bCAxisAngle * );
// ??1bCAxisAngle@@QAE@XZ public: __thiscall bCAxisAngle::~bCAxisAngle(void)
void __thiscall __1bCAxisAngle__QAE_XZ( bCAxisAngle * );
// ??4bCAxisAngle@@QAEAAV0@ABV0@@Z public: bCAxisAngle & __thiscall bCAxisAngle::operator=(bCAxisAngle const &)
bCAxisAngle * __thiscall __4bCAxisAngle__QAEAAV0_ABV0__Z( bCAxisAngle *, bCAxisAngle const * );
// ??4bCAxisAngle@@QAEAAV0@ABVbCEulerAngles@@@Z public: bCAxisAngle & __thiscall bCAxisAngle::operator=(bCEulerAngles const &)
bCAxisAngle * __thiscall __4bCAxisAngle__QAEAAV0_ABVbCEulerAngles___Z( bCAxisAngle *, bCEulerAngles const * );
// ??4bCAxisAngle@@QAEAAV0@ABVbCQuaternion@@@Z public: bCAxisAngle & __thiscall bCAxisAngle::operator=(bCQuaternion const &)
bCAxisAngle * __thiscall __4bCAxisAngle__QAEAAV0_ABVbCQuaternion___Z( bCAxisAngle *, bCQuaternion const * );
// ??5bCAxisAngle@@QBEAAVbCOStream@@AAV1@@Z public: bCOStream & __thiscall bCAxisAngle::operator>>(bCOStream &)const
bCOStream * __thiscall __5bCAxisAngle__QBEAAVbCOStream__AAV1__Z( bCAxisAngle const *, bCOStream * );
// ??6bCAxisAngle@@QAEAAVbCIStream@@AAV1@@Z public: bCIStream & __thiscall bCAxisAngle::operator<<(bCIStream &)
bCIStream * __thiscall __6bCAxisAngle__QAEAAVbCIStream__AAV1__Z( bCAxisAngle *, bCIStream * );
// ??8bCAxisAngle@@QBE_NABV0@@Z public: bool __thiscall bCAxisAngle::operator==(bCAxisAngle const &)const
GEBool __thiscall __8bCAxisAngle__QBE_NABV0__Z( bCAxisAngle const *, bCAxisAngle const * );
// ??9bCAxisAngle@@QBE_NABV0@@Z public: bool __thiscall bCAxisAngle::operator!=(bCAxisAngle const &)const
GEBool __thiscall __9bCAxisAngle__QBE_NABV0__Z( bCAxisAngle const *, bCAxisAngle const * );
// ?AccessAngle@bCAxisAngle@@QAEAAMXZ public: float & __thiscall bCAxisAngle::AccessAngle(void)
GEFloat * __thiscall _AccessAngle_bCAxisAngle__QAEAAMXZ( bCAxisAngle * );
// ?AccessAxis@bCAxisAngle@@QAEAAVbCVector@@XZ public: bCVector & __thiscall bCAxisAngle::AccessAxis(void)
bCVector * __thiscall _AccessAxis_bCAxisAngle__QAEAAVbCVector__XZ( bCAxisAngle * );
// ?Clear@bCAxisAngle@@QAEXXZ public: void __thiscall bCAxisAngle::Clear(void)
void __thiscall _Clear_bCAxisAngle__QAEXXZ( bCAxisAngle * );
// ?GetAngle@bCAxisAngle@@QBEMXZ public: float __thiscall bCAxisAngle::GetAngle(void)const
GEFloat __thiscall _GetAngle_bCAxisAngle__QBEMXZ( bCAxisAngle const * );
// ?GetAngle@bCAxisAngle@@QBEXAAM@Z public: void __thiscall bCAxisAngle::GetAngle(float &)const
void __thiscall _GetAngle_bCAxisAngle__QBEXAAM_Z( bCAxisAngle const *, GEFloat * );
// ?GetAxis@bCAxisAngle@@QBEABVbCVector@@XZ public: bCVector const & __thiscall bCAxisAngle::GetAxis(void)const
bCVector const * __thiscall _GetAxis_bCAxisAngle__QBEABVbCVector__XZ( bCAxisAngle const * );
// ?GetAxis@bCAxisAngle@@QBEXAAVbCVector@@@Z public: void __thiscall bCAxisAngle::GetAxis(bCVector &)const
void __thiscall _GetAxis_bCAxisAngle__QBEXAAVbCVector___Z( bCAxisAngle const *, bCVector * );
// ?GetEulerAngles@bCAxisAngle@@QBE?AVbCEulerAngles@@XZ public: bCEulerAngles __thiscall bCAxisAngle::GetEulerAngles(void)const
bCEulerAngles * __thiscall _GetEulerAngles_bCAxisAngle__QBE_AVbCEulerAngles__XZ( bCAxisAngle const *, bCEulerAngles * );
// ?GetQuaternion@bCAxisAngle@@QBE?AVbCQuaternion@@XZ public: bCQuaternion __thiscall bCAxisAngle::GetQuaternion(void)const
bCQuaternion * __thiscall _GetQuaternion_bCAxisAngle__QBE_AVbCQuaternion__XZ( bCAxisAngle const *, bCQuaternion * );
// ?IsEqual@bCAxisAngle@@QBE_NABV1@@Z public: bool __thiscall bCAxisAngle::IsEqual(bCAxisAngle const &)const
GEBool __thiscall _IsEqual_bCAxisAngle__QBE_NABV1__Z( bCAxisAngle const *, bCAxisAngle const * );
// ?SetAngle@bCAxisAngle@@QAEXM@Z public: void __thiscall bCAxisAngle::SetAngle(float)
void __thiscall _SetAngle_bCAxisAngle__QAEXM_Z( bCAxisAngle *, GEFloat );
// ?SetAxis@bCAxisAngle@@QAEXABVbCVector@@@Z public: void __thiscall bCAxisAngle::SetAxis(bCVector const &)
void __thiscall _SetAxis_bCAxisAngle__QAEXABVbCVector___Z( bCAxisAngle *, bCVector const * );
// ?SetAxisAngle@bCAxisAngle@@QAEXABV1@@Z public: void __thiscall bCAxisAngle::SetAxisAngle(bCAxisAngle const &)
void __thiscall _SetAxisAngle_bCAxisAngle__QAEXABV1__Z( bCAxisAngle *, bCAxisAngle const * );
// ?SetAxisAngle@bCAxisAngle@@QAEXABVbCEulerAngles@@@Z public: void __thiscall bCAxisAngle::SetAxisAngle(bCEulerAngles const &)
void __thiscall _SetAxisAngle_bCAxisAngle__QAEXABVbCEulerAngles___Z( bCAxisAngle *, bCEulerAngles const * );
// ?SetAxisAngle@bCAxisAngle@@QAEXABVbCQuaternion@@@Z public: void __thiscall bCAxisAngle::SetAxisAngle(bCQuaternion const &)
void __thiscall _SetAxisAngle_bCAxisAngle__QAEXABVbCQuaternion___Z( bCAxisAngle *, bCQuaternion const * );
// ?SetAxisAngle@bCAxisAngle@@QAEXABVbCVector@@M@Z public: void __thiscall bCAxisAngle::SetAxisAngle(bCVector const &,float)
void __thiscall _SetAxisAngle_bCAxisAngle__QAEXABVbCVector__M_Z( bCAxisAngle *, bCVector const *, GEFloat );
